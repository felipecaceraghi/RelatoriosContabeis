
import json
import pyodbc
import pandas as pd
from datetime import datetime
import time
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, Border, Side
from openpyxl.utils import get_column_letter
import pyperclip
import re
import file_renamer

# --- PARÂMETROS DE CONFIGURAÇÃO ---
DEBUG = False
CONN_STR = (
    "DRIVER={SQL Anywhere 17};"
    "HOST=NOTE-GO-273.go.local:2638;"
    "DBN=contabil;"
    "UID=ESTATISTICA002;"
    "PWD=U0T/wq6OdZ0oYSpvJRWGfg==;"
)

#
# >>>>> COLOQUE A SUA CONSULTA SQL PRINCIPAL (RAZÃO) AQUI DENTRO <<<
#
SQL_RAZAO_TEMPLATE = """
SELECT TD_DADOS_RAZAO.CODI_EMP, TD_DADOS_RAZAO.CLASC, TD_DADOS_RAZAO.NOMEC, TD_DADOS_RAZAO.CODIC, TD_DADOS_RAZAO.TIPO, TD_DADOS_RAZAO.DATALAN, TD_DADOS_RAZAO.NUMELAN, TD_DADOS_RAZAO.SALDOANT, TD_DADOS_RAZAO.CONTRAP, TD_DADOS_RAZAO.ORDEM_NAT_CTA, TD_DADOS_RAZAO.ORIGEM, TD_DADOS_RAZAO.VALDEB, TD_DADOS_RAZAO.VALCRE, ROUND(TD_DADOS_RAZAO.VALDEB - TD_DADOS_RAZAO.VALCRE, 2) AS SALDO, ROUND(TD_DADOS_RAZAO.SALDOANT + (TD_DADOS_RAZAO.VALDEB - TD_DADOS_RAZAO.VALCRE), 2) AS SALDO_EXE, TD_DADOS_RAZAO.MASCARA, TD_DADOS_RAZAO.MASCREL, TD_DADOS_RAZAO.HISTORICO AS HISTORICO, TD_DADOS_RAZAO.ZEBRA1 AS ZEBRA1, TD_DADOS_RAZAO.TIPO_LAN, TD_DADOS_RAZAO.EMISSAO, TD_DADOS_RAZAO.CODI_LOTE, TD_DADOS_RAZAO.NOME_FANTASIA_INCORPORACAO, TD_DADOS_RAZAO.NRO_QUEBRA_INCORPORACAO, TD_DADOS_RAZAO.NATUREZA, CASE WHEN TD_VALIDA_SCP.TEM_SCP = 'S' THEN CASE WHEN TD_DADOS_RAZAO.FILIAL = 0 THEN ##CODI_EMP## ELSE TD_DADOS_RAZAO.FILIAL END ELSE TD_DADOS_RAZAO.FILIAL END AS FILIAL, TD_DADOS_RAZAO.CODIGO_SCP, CASE WHEN TD_VALIDA_SCP.TEM_SCP = 'S' THEN COALESCE(TD_DADOS_RAZAO.DESCRICAO_SCP, TD_NOME_SCP.RAZAO_EMP, '') ELSE TD_DADOS_RAZAO.DESCRICAO_SCP END AS DESCRICAO_SCP, CASE WHEN TD_CONTA_REDUTORA.TOTAL > 0 THEN CASE WHEN TD_DADOS_RAZAO.NATUREZA = 'D' THEN CASE WHEN TD_DADOS_RAZAO.VALCRE > 0 THEN 0 ELSE 1 END ELSE CASE WHEN TD_DADOS_RAZAO.VALDEB > 0 THEN 0 ELSE 1 END END ELSE TD_DADOS_RAZAO.ORDEM_NAT_CTA END AS ORDEM FROM (SELECT CTCONTAS.CODI_EMP AS CODI_EMP, CTCONTAS.CLAS_CTA AS CLASC, CTCONTAS.NOME_CTA AS NOMEC, CTCONTAS.CODI_CTA AS CODIC, 1 AS TIPO, DATE (##DATA_INICIAL_SQL##) AS DATALAN, 0 AS NUMELAN, TDDEBITO.VALOR - TDCREDITO.VALOR AS SALDOANT, 0 AS CONTRAP, 0 AS ORDEM_NAT_CTA, 0 AS ORIGEM, CAST(0 AS DECIMAL (13, 2)) AS VALDEB, CAST(0 AS DECIMAL (13, 2)) AS VALCRE, CAST(0 AS DECIMAL (13, 2)) AS SALDO, CAST(0 AS DECIMAL (13, 2)) AS SALDO_EXE, CTPARMTO.MASC_PAR AS MASCARA, CTPARMTO.MASC_REL AS MASCREL, CTCONTAS.NOME_CTA AS HISTORICO, CTCONTAS.NOME_CTA AS ZEBRA1, SPACE (1) AS TIPO_LAN, CURRENT TIMESTAMP AS EMISSAO, NULL AS CODI_LOTE, CAST(NULL AS VARCHAR(50)) AS NOME_FANTASIA_INCORPORACAO, 1 AS NRO_QUEBRA_INCORPORACAO, TDNATUREZA.NATUREZA AS NATUREZA, (CASE WHEN CTPARMTO.EMAT_PAR = 'S' AND CTPARMTO.SOCIEDADE_EM_CONTA_PARTICIPACAO_PAR ='S' THEN ##CODI_EMP## ELSE 0 END) AS FILIAL, 0 AS CODIGO_SCP, TDEMPRESA.NOME AS DESCRICAO_SCP, 0 AS ORDEM FROM BETHADBA.CTCONTAS AS CTCONTAS INNER JOIN BETHADBA.CTPARMTO AS CTPARMTO ON (CTPARMTO.CODI_EMP = ##CODI_EMP##), LATERAL(SELECT COUNT(1) AS TOTAL FROM BETHADBA.CTSELECAO_SCP SELECAO_SCP WHERE SELECAO_SCP.CODI_EMP = CTPARMTO.CODI_EMP AND SELECAO_SCP.USUARIO = CURRENT USER) AS TDEXISTE_SELECAO_SCP, LATERAL(SELECT COALESCE(SUM(CTLANCTO.VLOR_LAN), 0) AS VALOR FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'D')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP WHERE CTLANCTO.CODI_EMP IN (##CODI_EMP##) AND ##FILIAL_FILTER## AND CTLANCTO.DATA_LAN_BUSCA < ##DATA_INICIAL_SQL## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CDEB_LAN = CTCONTAS.CODI_CTA AND (CTPARMTO.SOCIEDADE_EM_CONTA_PARTICIPACAO_PAR = 'N' OR (CTPARMTO.SOCIEDADE_EM_CONTA_PARTICIPACAO_PAR = 'S' AND TD_SCP.EXISTE = 1)) ) AS TDDEBITO, LATERAL(SELECT COALESCE(SUM(CTLANCTO.VLOR_LAN), 0) AS VALOR FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'C')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP WHERE CTLANCTO.CODI_EMP IN (##CODI_EMP##) AND ##FILIAL_FILTER## AND CTLANCTO.DATA_LAN_BUSCA < ##DATA_INICIAL_SQL## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CCRE_LAN = CTCONTAS.CODI_CTA AND (CTPARMTO.SOCIEDADE_EM_CONTA_PARTICIPACAO_PAR = 'N' OR (CTPARMTO.SOCIEDADE_EM_CONTA_PARTICIPACAO_PAR = 'S' AND TD_SCP.EXISTE = 1)) ) AS TDCREDITO, LATERAL(SELECT COUNT(*) AS QTDE FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'D')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP WHERE CTLANCTO.CODI_EMP IN (##CODI_EMP##) AND ##FILIAL_FILTER## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CDEB_LAN = CTCONTAS.CODI_CTA AND CTLANCTO.DATA_LAN_BUSCA >= ##DATA_INICIAL_SQL## AND CTLANCTO.DATA_LAN_BUSCA <= ##DATA_FINAL_SQL## AND (CTPARMTO.SOCIEDADE_EM_CONTA_PARTICIPACAO_PAR = 'N' OR (CTPARMTO.SOCIEDADE_EM_CONTA_PARTICIPACAO_PAR = 'S' AND TD_SCP.EXISTE = 1)) ) AS TDEXISTE_DEBITO, LATERAL(SELECT COUNT(*) AS QTDE FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'C')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP WHERE CTLANCTO.CODI_EMP IN (##CODI_EMP##) AND ##FILIAL_FILTER## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CCRE_LAN = CTCONTAS.CODI_CTA AND CTLANCTO.DATA_LAN_BUSCA >= ##DATA_INICIAL_SQL## AND CTLANCTO.DATA_LAN_BUSCA <= ##DATA_FINAL_SQL## AND (CTPARMTO.SOCIEDADE_EM_CONTA_PARTICIPACAO_PAR = 'N' OR (CTPARMTO.SOCIEDADE_EM_CONTA_PARTICIPACAO_PAR = 'S' AND TD_SCP.EXISTE = 1)) ) AS TDEXISTE_CREDITO, LATERAL(SELECT COUNT(*) AS TOTAL FROM BETHADBA.CTINCORPORACAO_RET_AUX AS RET_AUX WHERE RET_AUX.CODI_EMP = CTPARMTO.CODI_EMP) AS TDRET_AUX, LATERAL ( SELECT MAX ( R.CLAS_CTA ) AS CLAS_CTA FROM BETHADBA.CTNATUREZA_CONTA R WHERE R.CODI_EMP = CTPARMTO.CODI_EMP AND R.CLAS_CTA = LEFT ( CTCONTAS.CLAS_CTA, LENGTH ( R.CLAS_CTA ) ) ) AS TD_MAX_NATUREZA, LATERAL ( SELECT COALESCE(MIN(R.NATUREZA), '') AS NATUREZA, COALESCE(MIN(R.GRUPO), '') AS GRUPO FROM BETHADBA.CTNATUREZA_CONTA R WHERE R.CODI_EMP = CTPARMTO.CODI_EMP AND R.CLAS_CTA = TD_MAX_NATUREZA.CLAS_CTA ) AS TDNATUREZA, LATERAL(SELECT G.RAZAO_EMP AS NOME FROM BETHADBA.GEEMPRE AS G WHERE G.CODI_EMP = CTPARMTO.CODI_EMP) AS TDEMPRESA WHERE CTCONTAS.CODI_EMP = ##CODI_EMP## AND/* custom */ (0 = 0 OR CTCONTAS.CODI_CTA = 0) AND (0 = 0 OR DSDBA.C_LEFT(CTCONTAS.CLAS_CTA, 0) = '') AND CTCONTAS.TIPO_CTA = DSDBA.C_CHAR (65) AND (('S' = DSDBA.C_CHAR (78) AND TDDEBITO.VALOR - TDCREDITO.VALOR <> 0 ) OR TDEXISTE_DEBITO.QTDE > 0 OR TDEXISTE_CREDITO.QTDE > 0) AND TDRET_AUX.TOTAL = 0 AND (TDEXISTE_SELECAO_SCP.TOTAL = 0 OR 'N' = 'N') AND ('N' = 'S' OR ('N' = 'N' AND TDNATUREZA.GRUPO <> 'C')) /* ANTEÇÃO: se alterar este SQL alterar também o da dw_relraz_ccu e a função of_Monta_Dados_CCU() do Razao */ UNION SELECT CTCONTAS.CODI_EMP AS CODI_EMP, CTCONTAS.CLAS_CTA AS CLASC, CTCONTAS.NOME_CTA AS NOMEC, CTCONTAS.CODI_CTA AS CODIC, 1 AS TIPO, DATE (##DATA_INICIAL_SQL##) AS DATALAN, 0 AS NUMELAN, SUM(TDDEBITO.VALOR) - SUM(TDCREDITO.VALOR) AS SALDOANT, 0 AS CONTRAP, 0 AS ORDEM_NAT_CTA, 0 AS ORIGEM, CAST(0 AS DECIMAL (13, 2)) AS VALDEB, CAST(0 AS DECIMAL (13, 2)) AS VALCRE, CAST(0 AS DECIMAL (13, 2)) AS SALDO, CAST(0 AS DECIMAL (13, 2)) AS SALDO_EXE, CTPARMTO.MASC_PAR AS MASCARA, CTPARMTO.MASC_REL AS MASCREL, CTCONTAS.NOME_CTA AS HISTORICO, CTCONTAS.NOME_CTA AS ZEBRA1, SPACE (1) AS TIPO_LAN, CURRENT TIMESTAMP AS EMISSAO, NULL AS CODI_LOTE, COALESCE(GEFILIAL.FANTASIA_EMP, '') AS NOME_FANTASIA_INCORPORACAO, COALESCE(RET_AUX.NUMERO_QUEBRA, 1) AS NRO_QUEBRA_INCORPORACAO, TDNATUREZA.NATUREZA AS NATUREZA, MAX((CASE WHEN CTPARMTO.EMAT_PAR = 'S' AND CTPARMTO.SOCIEDADE_EM_CONTA_PARTICIPACAO_PAR ='S' THEN ##CODI_EMP## ELSE 0 END)) AS FILIAL, 0 AS CODIGO_SCP, '' AS DESCRICAO_SCP, 0 AS ORDEM FROM BETHADBA.CTCONTAS AS CTCONTAS INNER JOIN BETHADBA.CTPARMTO AS CTPARMTO ON (CTPARMTO.CODI_EMP = ##CODI_EMP##) INNER JOIN BETHADBA.CTINCORPORACAO_RET_AUX AS RET_AUX ON (RET_AUX.CODI_EMP = CTPARMTO.CODI_EMP) INNER JOIN BETHADBA.GEEMPRE AS GEFILIAL ON (GEFILIAL.CODI_EMP = RET_AUX.FANTASIA), LATERAL(SELECT COUNT(1) AS TOTAL FROM BETHADBA.CTSELECAO_SCP SELECAO_SCP WHERE SELECAO_SCP.CODI_EMP = CTPARMTO.CODI_EMP AND SELECAO_SCP.USUARIO = CURRENT USER) AS TDEXISTE_SELECAO_SCP, LATERAL(SELECT COALESCE(SUM(CTLANCTO.VLOR_LAN), 0) AS VALOR FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'D')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP WHERE CTLANCTO.CODI_EMP = CTPARMTO.CODI_EMP AND CTLANCTO.FILI_LAN = RET_AUX.FILIAL AND CTLANCTO.DATA_LAN_BUSCA < ##DATA_INICIAL_SQL## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CDEB_LAN = CTCONTAS.CODI_CTA AND (CTPARMTO.SOCIEDADE_EM_CONTA_PARTICIPACAO_PAR = 'N' OR (CTPARMTO.SOCIEDADE_EM_CONTA_PARTICIPACAO_PAR = 'S' AND TD_SCP.EXISTE = 1)) ) AS TDDEBITO, LATERAL(SELECT COALESCE(SUM(CTLANCTO.VLOR_LAN), 0) AS VALOR FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'C')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP WHERE CTLANCTO.CODI_EMP = CTPARMTO.CODI_EMP AND CTLANCTO.FILI_LAN = RET_AUX.FILIAL AND CTLANCTO.DATA_LAN_BUSCA < ##DATA_INICIAL_SQL## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CCRE_LAN = CTCONTAS.CODI_CTA AND (CTPARMTO.SOCIEDADE_EM_CONTA_PARTICIPACAO_PAR = 'N' OR (CTPARMTO.SOCIEDADE_EM_CONTA_PARTICIPACAO_PAR = 'S' AND TD_SCP.EXISTE = 1)) ) AS TDCREDITO, LATERAL(SELECT COUNT(*) AS QTDE FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'D')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP WHERE CTLANCTO.CODI_EMP = CTPARMTO.CODI_EMP AND CTLANCTO.FILI_LAN = RET_AUX.FILIAL AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CDEB_LAN = CTCONTAS.CODI_CTA AND CTLANCTO.DATA_LAN_BUSCA >= ##DATA_INICIAL_SQL## AND CTLANCTO.DATA_LAN_BUSCA <= ##DATA_FINAL_SQL## AND (CTPARMTO.SOCIEDADE_EM_CONTA_PARTICIPACAO_PAR = 'N' OR (CTPARMTO.SOCIEDADE_EM_CONTA_PARTICIPACAO_PAR = 'S' AND TD_SCP.EXISTE = 1)) ) AS TDEXISTE_DEBITO, LATERAL(SELECT COUNT(*) AS QTDE FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'C')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP WHERE CTLANCTO.CODI_EMP = CTPARMTO.CODI_EMP AND CTLANCTO.FILI_LAN = RET_AUX.FILIAL AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CCRE_LAN = CTCONTAS.CODI_CTA AND CTLANCTO.DATA_LAN_BUSCA >= ##DATA_INICIAL_SQL## AND CTLANCTO.DATA_LAN_BUSCA <= ##DATA_FINAL_SQL## AND (CTPARMTO.SOCIEDADE_EM_CONTA_PARTICIPACAO_PAR = 'N' OR (CTPARMTO.SOCIEDADE_EM_CONTA_PARTICIPACAO_PAR = 'S' AND TD_SCP.EXISTE = 1)) ) AS TDEXISTE_CREDITO, LATERAL ( SELECT MAX ( R.CLAS_CTA ) AS CLAS_CTA FROM BETHADBA.CTNATUREZA_CONTA R WHERE R.CODI_EMP = CTPARMTO.CODI_EMP AND R.CLAS_CTA = LEFT ( CTCONTAS.CLAS_CTA, LENGTH ( R.CLAS_CTA ) ) ) AS TD_MAX_NATUREZA, LATERAL ( SELECT COALESCE(MIN(R.NATUREZA), '') AS NATUREZA, COALESCE(MIN(R.GRUPO), '') AS GRUPO FROM BETHADBA.CTNATUREZA_CONTA R WHERE R.CODI_EMP = CTPARMTO.CODI_EMP AND R.CLAS_CTA = TD_MAX_NATUREZA.CLAS_CTA ) AS TDNATUREZA WHERE CTCONTAS.CODI_EMP = ##CODI_EMP## AND/* custom */ (0 = 0 OR CTCONTAS.CODI_CTA = 0) AND (0 = 0 OR DSDBA.C_LEFT(CTCONTAS.CLAS_CTA, 0) = '') AND CTCONTAS.TIPO_CTA = DSDBA.C_CHAR (65) AND (('S' = DSDBA.C_CHAR (78) AND TDDEBITO.VALOR - TDCREDITO.VALOR <> 0 ) OR TDEXISTE_DEBITO.QTDE > 0 OR TDEXISTE_CREDITO.QTDE > 0) AND (TDEXISTE_SELECAO_SCP.TOTAL = 0 OR 'N' = 'N') AND ('N' = 'S' OR ('N' = 'N' AND TDNATUREZA.GRUPO <> 'C')) GROUP BY CTCONTAS.CLAS_CTA, CTCONTAS.NOME_CTA, CTCONTAS.CODI_CTA, CTPARMTO.MASC_PAR, CTPARMTO.MASC_REL, COALESCE(GEFILIAL.FANTASIA_EMP, ''), COALESCE(RET_AUX.NUMERO_QUEBRA, 1), NATUREZA, CTCONTAS.CODI_EMP UNION SELECT CTCONTAS.CODI_EMP AS CODI_EMP, CTCONTAS.CLAS_CTA AS CLASC, CTCONTAS.NOME_CTA AS NOMEC, CTCONTAS.CODI_CTA AS CODIC, 1 AS TIPO, DATE (##DATA_INICIAL_SQL##) AS DATALAN, 0 AS NUMELAN, TDDEBITO.VALOR - TDCREDITO.VALOR AS SALDOANT, 0 AS CONTRAP, 0 AS ORDEM_NAT_CTA, 0 AS ORIGEM, CAST(0 AS DECIMAL (13, 2)) AS VALDEB, CAST(0 AS DECIMAL (13, 2)) AS VALCRE, CAST(0 AS DECIMAL (13, 2)) AS SALDO, CAST(0 AS DECIMAL (13, 2)) AS SALDO_EXE, CTPARMTO.MASC_PAR AS MASCARA, CTPARMTO.MASC_REL AS MASCREL, CTCONTAS.NOME_CTA AS HISTORICO, CTCONTAS.NOME_CTA AS ZEBRA1, SPACE (1) AS TIPO_LAN, CURRENT TIMESTAMP AS EMISSAO, NULL AS CODI_LOTE, CAST(NULL AS VARCHAR(50)) AS NOME_FANTASIA_INCORPORACAO, 1 AS NRO_QUEBRA_INCORPORACAO, TDNATUREZA.NATUREZA AS NATUREZA, (CASE WHEN CTPARMTO.EMAT_PAR = 'S' AND CTPARMTO.SOCIEDADE_EM_CONTA_PARTICIPACAO_PAR ='S' THEN ##CODI_EMP## ELSE 0 END) AS FILIAL, COALESCE(CTSELECAO_SCP.I_SCP, 0) AS CODIGO_SCP, COALESCE(GESCP.DESCRICAO, GEEMPRE.RAZAO_EMP) AS DESCRICAO_SCP, 0 AS ORDEM FROM BETHADBA.CTCONTAS AS CTCONTAS INNER JOIN BETHADBA.CTPARMTO AS CTPARMTO ON (CTPARMTO.CODI_EMP = ##CODI_EMP##) INNER JOIN BETHADBA.CTSELECAO_SCP AS CTSELECAO_SCP ON (CTSELECAO_SCP.CODI_EMP = CTPARMTO.CODI_EMP AND CTSELECAO_SCP.USUARIO = CURRENT USER), LATERAL(SELECT MAX(GESCP.DESCRICAO) AS DESCRICAO FROM BETHADBA.GESCP AS GESCP WHERE GESCP.CODI_EMP = CTSELECAO_SCP.CODI_EMP AND GESCP.I_SCP = CTSELECAO_SCP.I_SCP) AS GESCP, LATERAL(SELECT GEEMPRE.RAZAO_EMP AS RAZAO_EMP FROM BETHADBA.GEEMPRE AS GEEMPRE WHERE GEEMPRE.CODI_EMP = CTPARMTO.CODI_EMP) AS GEEMPRE, LATERAL(SELECT COUNT(1) AS TOTAL FROM BETHADBA.CTSELECAO_SCP SELECAO_SCP WHERE SELECAO_SCP.CODI_EMP = CTPARMTO.CODI_EMP AND SELECAO_SCP.USUARIO = CURRENT USER) AS TDEXISTE_SELECAO_SCP, LATERAL(SELECT COALESCE(SUM(CTLANCTO.VLOR_LAN), 0) AS VALOR, MAX(CTLANCTO.CDEB_LAN) AS CONTA_DEBITO FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'D')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP, LATERAL(SELECT COUNT(1) AS EXISTE FROM BETHADBA.CTLANCTO_SCP AS SCP WHERE SCP.CODI_EMP = CTLANCTO.CODI_EMP AND SCP.NUME_LAN = CTLANCTO.NUME_LAN AND SCP.CODI_LOTE = CTLANCTO.CODI_LOTE AND SCP.FILIAL = CTLANCTO.FILI_LAN AND SCP.TIPO = 'D') AS TD_LANCTO_POSSUI_SCP WHERE CTLANCTO.CODI_EMP IN (##CODI_EMP##) AND ##FILIAL_FILTER## AND CTLANCTO.DATA_LAN_BUSCA < ##DATA_INICIAL_SQL## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CDEB_LAN = CTCONTAS.CODI_CTA AND TD_SCP.EXISTE = 1 AND TD_LANCTO_POSSUI_SCP.EXISTE = 0 AND CTSELECAO_SCP.FILIAL IS NULL AND CTSELECAO_SCP.I_SCP IS NULL) AS TDDEBITO_SEM_SCP, LATERAL(SELECT COALESCE(SUM(CTLANCTO.VLOR_LAN), 0) AS VALOR, MAX(CTLANCTO.CDEB_LAN) AS CONTA_DEBITO FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'D')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP, LATERAL(SELECT COUNT(1) AS EXISTE FROM BETHADBA.CTLANCTO_SCP AS SCP WHERE SCP.CODI_EMP = CTLANCTO.CODI_EMP AND SCP.NUME_LAN = CTLANCTO.NUME_LAN AND SCP.CODI_LOTE = CTLANCTO.CODI_LOTE AND SCP.FILIAL = CTLANCTO.FILI_LAN AND SCP.TIPO = 'D' AND SCP.I_SCP = CTSELECAO_SCP.I_SCP) AS TD_LANCTO_POSSUI_SCP WHERE CTLANCTO.CODI_EMP IN (##CODI_EMP##) AND ##FILIAL_FILTER## AND CTLANCTO.DATA_LAN_BUSCA < ##DATA_INICIAL_SQL## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CDEB_LAN = CTCONTAS.CODI_CTA AND CTLANCTO.FILI_LAN = CTSELECAO_SCP.FILIAL AND TD_SCP.EXISTE = 1 AND TD_LANCTO_POSSUI_SCP.EXISTE = 1) AS TDDEBITO_COM_SCP, LATERAL(SELECT COALESCE(SUM(CTLANCTO.VLOR_LAN), 0) AS VALOR, MAX(CTLANCTO.CCRE_LAN) AS CONTA_CREDITO FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'C')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP, LATERAL(SELECT COUNT(1) AS EXISTE FROM BETHADBA.CTLANCTO_SCP AS SCP WHERE SCP.CODI_EMP = CTLANCTO.CODI_EMP AND SCP.NUME_LAN = CTLANCTO.NUME_LAN AND SCP.CODI_LOTE = CTLANCTO.CODI_LOTE AND SCP.FILIAL = CTLANCTO.FILI_LAN AND SCP.TIPO = 'C') AS TD_LANCTO_POSSUI_SCP WHERE CTLANCTO.CODI_EMP IN (##CODI_EMP##) AND ##FILIAL_FILTER## AND CTLANCTO.DATA_LAN_BUSCA < ##DATA_INICIAL_SQL## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CCRE_LAN = CTCONTAS.CODI_CTA AND TD_SCP.EXISTE = 1 AND TD_LANCTO_POSSUI_SCP.EXISTE = 0 AND CTSELECAO_SCP.FILIAL IS NULL AND CTSELECAO_SCP.I_SCP IS NULL) AS TDCREDITO_SEM_SCP, LATERAL(SELECT COALESCE(SUM(CTLANCTO.VLOR_LAN), 0) AS VALOR, MAX(CTLANCTO.CCRE_LAN) AS CONTA_CREDITO FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'C')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP, LATERAL(SELECT COUNT(1) AS EXISTE FROM BETHADBA.CTLANCTO_SCP AS SCP WHERE SCP.CODI_EMP = CTLANCTO.CODI_EMP AND SCP.NUME_LAN = CTLANCTO.NUME_LAN AND SCP.CODI_LOTE = CTLANCTO.CODI_LOTE AND SCP.FILIAL = CTLANCTO.FILI_LAN AND SCP.TIPO = 'C' AND SCP.I_SCP = CTSELECAO_SCP.I_SCP) AS TD_LANCTO_POSSUI_SCP WHERE CTLANCTO.CODI_EMP IN (##CODI_EMP##) AND ##FILIAL_FILTER## AND CTLANCTO.DATA_LAN_BUSCA < ##DATA_INICIAL_SQL## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CCRE_LAN = CTCONTAS.CODI_CTA AND CTLANCTO.FILI_LAN = CTSELECAO_SCP.FILIAL AND TD_SCP.EXISTE = 1 AND TD_LANCTO_POSSUI_SCP.EXISTE = 1) AS TDCREDITO_COM_SCP, LATERAL(SELECT (COALESCE(TDDEBITO_SEM_SCP.VALOR, 0) + COALESCE(TDDEBITO_COM_SCP.VALOR, 0)) AS VALOR FROM DSDBA.DUMMY) AS TDDEBITO, LATERAL(SELECT (COALESCE(TDCREDITO_SEM_SCP.VALOR, 0) + COALESCE(TDCREDITO_COM_SCP.VALOR, 0)) AS VALOR FROM DSDBA.DUMMY) AS TDCREDITO, LATERAL(SELECT COUNT(*) AS QTDE FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'D')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP, LATERAL(SELECT COUNT(1) AS EXISTE FROM BETHADBA.CTLANCTO_SCP AS SCP WHERE SCP.CODI_EMP = CTLANCTO.CODI_EMP AND SCP.NUME_LAN = CTLANCTO.NUME_LAN AND SCP.CODI_LOTE = CTLANCTO.CODI_LOTE AND SCP.FILIAL = CTLANCTO.FILI_LAN AND SCP.TIPO = 'D') AS TD_LANCTO_POSSUI_SCP WHERE CTLANCTO.CODI_EMP IN (##CODI_EMP##) AND ##FILIAL_FILTER## AND CTLANCTO.DATA_LAN_BUSCA >= ##DATA_INICIAL_SQL## AND CTLANCTO.DATA_LAN_BUSCA <= ##DATA_FINAL_SQL## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CDEB_LAN = CTCONTAS.CODI_CTA AND TD_SCP.EXISTE = 1 AND TD_LANCTO_POSSUI_SCP.EXISTE = 0 AND CTSELECAO_SCP.FILIAL IS NULL AND CTSELECAO_SCP.I_SCP IS NULL) AS TDEXISTE_DEBITO_SEM_SCP, LATERAL(SELECT COUNT(*) AS QTDE FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'D')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP, LATERAL(SELECT COUNT(1) AS EXISTE FROM BETHADBA.CTLANCTO_SCP AS SCP WHERE SCP.CODI_EMP = CTLANCTO.CODI_EMP AND SCP.NUME_LAN = CTLANCTO.NUME_LAN AND SCP.CODI_LOTE = CTLANCTO.CODI_LOTE AND SCP.FILIAL = CTLANCTO.FILI_LAN AND SCP.TIPO = 'D' AND SCP.I_SCP = CTSELECAO_SCP.I_SCP) AS TD_LANCTO_POSSUI_SCP WHERE CTLANCTO.CODI_EMP IN (##CODI_EMP##) AND ##FILIAL_FILTER## AND CTLANCTO.DATA_LAN_BUSCA >= ##DATA_INICIAL_SQL## AND CTLANCTO.DATA_LAN_BUSCA <= ##DATA_FINAL_SQL## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CDEB_LAN = CTCONTAS.CODI_CTA AND CTLANCTO.FILI_LAN = CTSELECAO_SCP.FILIAL AND TD_SCP.EXISTE = 1 AND TD_LANCTO_POSSUI_SCP.EXISTE = 1) AS TDEXISTE_DEBITO_COM_SCP, LATERAL(SELECT COUNT(*) AS QTDE FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'C')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP, LATERAL(SELECT COUNT(1) AS EXISTE FROM BETHADBA.CTLANCTO_SCP AS SCP WHERE SCP.CODI_EMP = CTLANCTO.CODI_EMP AND SCP.NUME_LAN = CTLANCTO.NUME_LAN AND SCP.CODI_LOTE = CTLANCTO.CODI_LOTE AND SCP.FILIAL = CTLANCTO.FILI_LAN AND SCP.TIPO = 'C') AS TD_LANCTO_POSSUI_SCP WHERE CTLANCTO.CODI_EMP IN (##CODI_EMP##) AND ##FILIAL_FILTER## AND CTLANCTO.DATA_LAN_BUSCA >= ##DATA_INICIAL_SQL## AND CTLANCTO.DATA_LAN_BUSCA <= ##DATA_FINAL_SQL## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CCRE_LAN = CTCONTAS.CODI_CTA AND TD_SCP.EXISTE = 1 AND TD_LANCTO_POSSUI_SCP.EXISTE = 0 AND CTSELECAO_SCP.FILIAL IS NULL AND CTSELECAO_SCP.I_SCP IS NULL) AS TDEXISTE_CREDITO_SEM_SCP, LATERAL(SELECT COUNT(*) AS QTDE FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'C')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP, LATERAL(SELECT COUNT(1) AS EXISTE FROM BETHADBA.CTLANCTO_SCP AS SCP WHERE SCP.CODI_EMP = CTLANCTO.CODI_EMP AND SCP.NUME_LAN = CTLANCTO.NUME_LAN AND SCP.CODI_LOTE = CTLANCTO.CODI_LOTE AND SCP.FILIAL = CTLANCTO.FILI_LAN AND SCP.TIPO = 'C' AND SCP.I_SCP = CTSELECAO_SCP.I_SCP) AS TD_LANCTO_POSSUI_SCP WHERE CTLANCTO.CODI_EMP IN (##CODI_EMP##) AND ##FILIAL_FILTER## AND CTLANCTO.DATA_LAN_BUSCA >= ##DATA_INICIAL_SQL## AND CTLANCTO.DATA_LAN_BUSCA <= ##DATA_FINAL_SQL## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CCRE_LAN = CTCONTAS.CODI_CTA AND CTLANCTO.FILI_LAN = CTSELECAO_SCP.FILIAL AND TD_SCP.EXISTE = 1 AND TD_LANCTO_POSSUI_SCP.EXISTE = 1) AS TDEXISTE_CREDITO_COM_SCP, LATERAL(SELECT (COALESCE(TDEXISTE_DEBITO_SEM_SCP.QTDE, 0) + COALESCE(TDEXISTE_DEBITO_COM_SCP.QTDE, 0)) AS QTDE FROM DSDBA.DUMMY) AS TDEXISTE_DEBITO, LATERAL(SELECT (COALESCE(TDEXISTE_CREDITO_SEM_SCP.QTDE, 0) + COALESCE(TDEXISTE_CREDITO_COM_SCP.QTDE, 0)) AS QTDE FROM DSDBA.DUMMY) AS TDEXISTE_CREDITO, LATERAL ( SELECT MAX ( R.CLAS_CTA ) AS CLAS_CTA FROM BETHADBA.CTNATUREZA_CONTA R WHERE R.CODI_EMP = CTPARMTO.CODI_EMP AND R.CLAS_CTA = LEFT ( CTCONTAS.CLAS_CTA, LENGTH ( R.CLAS_CTA ) ) ) AS TD_MAX_NATUREZA, LATERAL ( SELECT COALESCE(MIN(R.NATUREZA), '') AS NATUREZA, COALESCE(MIN(R.GRUPO), '') AS GRUPO FROM BETHADBA.CTNATUREZA_CONTA R WHERE R.CODI_EMP = CTPARMTO.CODI_EMP AND R.CLAS_CTA = TD_MAX_NATUREZA.CLAS_CTA ) AS TDNATUREZA WHERE CTCONTAS.CODI_EMP = ##CODI_EMP## AND/* custom */ (0 = 0 OR CTCONTAS.CODI_CTA = 0) AND (0 = 0 OR DSDBA.C_LEFT(CTCONTAS.CLAS_CTA, 0) = '') AND CTCONTAS.TIPO_CTA = DSDBA.C_CHAR (65) AND (('S' = DSDBA.C_CHAR (78) AND TDDEBITO.VALOR - TDCREDITO.VALOR <> 0 ) OR TDEXISTE_DEBITO.QTDE > 0 OR TDEXISTE_CREDITO.QTDE > 0) AND 'N' = 'S' AND ('N' = 'S' OR ('N' = 'N' AND TDNATUREZA.GRUPO <> 'C')) AND CTPARMTO.EMAT_PAR = 'N' UNION SELECT CTCONTAS.CODI_EMP AS CODI_EMP, CTCONTAS.CLAS_CTA AS CLASC, CTCONTAS.NOME_CTA AS NOMEC, CTCONTAS.CODI_CTA AS CODIC, 1 AS TIPO, DATE (##DATA_INICIAL_SQL##) AS DATALAN, 0 AS NUMELAN, TDDEBITO.VALOR - TDCREDITO.VALOR AS SALDOANT, 0 AS CONTRAP, 0 AS ORDEM_NAT_CTA, 0 AS ORIGEM, CAST(0 AS DECIMAL (13, 2)) AS VALDEB, CAST(0 AS DECIMAL (13, 2)) AS VALCRE, CAST(0 AS DECIMAL (13, 2)) AS SALDO, CAST(0 AS DECIMAL (13, 2)) AS SALDO_EXE, CTPARMTO.MASC_PAR AS MASCARA, CTPARMTO.MASC_REL AS MASCREL, CTCONTAS.NOME_CTA AS HISTORICO, CTCONTAS.NOME_CTA AS ZEBRA1, SPACE (1) AS TIPO_LAN, CURRENT TIMESTAMP AS EMISSAO, NULL AS CODI_LOTE, CAST(NULL AS VARCHAR(50)) AS NOME_FANTASIA_INCORPORACAO, 1 AS NRO_QUEBRA_INCORPORACAO, TDNATUREZA.NATUREZA AS NATUREZA, TD_FILIAL.CODIGO_FILIAL AS FILIAL, COALESCE(CTSELECAO_SCP.I_SCP, 0) AS CODIGO_SCP, (CASE WHEN ##CODI_EMP##=TD_FILIAL.CODIGO_FILIAL THEN GESCP.DESCRICAO ELSE TD_FILIAL.RAZAO_EMP END) AS DESCRICAO_SCP, 0 AS ORDEM FROM BETHADBA.CTCONTAS AS CTCONTAS INNER JOIN BETHADBA.CTPARMTO AS CTPARMTO ON (CTPARMTO.CODI_EMP = ##CODI_EMP##) INNER JOIN BETHADBA.CTSELECAO_SCP AS CTSELECAO_SCP ON (CTSELECAO_SCP.CODI_EMP = CTPARMTO.CODI_EMP AND CTSELECAO_SCP.USUARIO = CURRENT USER), LATERAL(SELECT E.CODI_EMP AS CODIGO_FILIAL, E.RAZAO_EMP AS RAZAO_EMP FROM BETHADBA.GEEMPRE AS E WHERE E.CODI_EMP IN(SELECT CTFILIALUSER.CODI_FIL FROM BETHADBA.CTFILIALUSER AS CTFILIALUSER WHERE CTFILIALUSER.CODI_EMP = ##CODI_EMP## AND UPPER(CTFILIALUSER.USUARIO) = UPPER(CURRENT USER))) AS TD_FILIAL, LATERAL(SELECT MAX(GESCP.DESCRICAO) AS DESCRICAO FROM BETHADBA.GESCP AS GESCP WHERE GESCP.CODI_EMP = CTSELECAO_SCP.CODI_EMP AND GESCP.I_SCP = CTSELECAO_SCP.I_SCP) AS GESCP, LATERAL(SELECT GEEMPRE.RAZAO_EMP AS RAZAO_EMP FROM BETHADBA.GEEMPRE AS GEEMPRE WHERE GEEMPRE.CODI_EMP = CTPARMTO.CODI_EMP) AS GEEMPRE, LATERAL(SELECT COUNT(1) AS TOTAL FROM BETHADBA.CTSELECAO_SCP SELECAO_SCP WHERE SELECAO_SCP.CODI_EMP = CTPARMTO.CODI_EMP AND SELECAO_SCP.USUARIO = CURRENT USER) AS TDEXISTE_SELECAO_SCP, LATERAL(SELECT COALESCE(SUM(CTLANCTO.VLOR_LAN), 0) AS VALOR, MAX(CTLANCTO.CDEB_LAN) AS CONTA_DEBITO FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'D')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP, LATERAL(SELECT COUNT(1) AS EXISTE FROM BETHADBA.CTLANCTO_SCP AS SCP WHERE SCP.CODI_EMP = CTLANCTO.CODI_EMP AND SCP.NUME_LAN = CTLANCTO.NUME_LAN AND SCP.CODI_LOTE = CTLANCTO.CODI_LOTE AND SCP.FILIAL = CTLANCTO.FILI_LAN AND SCP.TIPO = 'D') AS TD_LANCTO_POSSUI_SCP WHERE CTLANCTO.CODI_EMP = CTPARMTO.CODI_EMP AND CTLANCTO.FILI_LAN = TD_FILIAL.CODIGO_FILIAL AND CTLANCTO.DATA_LAN_BUSCA < ##DATA_INICIAL_SQL## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CDEB_LAN = CTCONTAS.CODI_CTA AND TD_SCP.EXISTE = 1 AND TD_LANCTO_POSSUI_SCP.EXISTE = 0 AND CTSELECAO_SCP.FILIAL IS NULL AND CTSELECAO_SCP.I_SCP IS NULL) AS TDDEBITO_SEM_SCP, LATERAL(SELECT COALESCE(SUM(CTLANCTO.VLOR_LAN), 0) AS VALOR, MAX(CTLANCTO.CDEB_LAN) AS CONTA_DEBITO FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'D')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP, LATERAL(SELECT COUNT(1) AS EXISTE FROM BETHADBA.CTLANCTO_SCP AS SCP WHERE SCP.CODI_EMP = CTLANCTO.CODI_EMP AND SCP.NUME_LAN = CTLANCTO.NUME_LAN AND SCP.CODI_LOTE = CTLANCTO.CODI_LOTE AND SCP.FILIAL = CTLANCTO.FILI_LAN AND SCP.TIPO = 'D' AND SCP.I_SCP = CTSELECAO_SCP.I_SCP) AS TD_LANCTO_POSSUI_SCP WHERE CTLANCTO.CODI_EMP = CTPARMTO.CODI_EMP AND CTLANCTO.FILI_LAN = TD_FILIAL.CODIGO_FILIAL AND CTLANCTO.DATA_LAN_BUSCA < ##DATA_INICIAL_SQL## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CDEB_LAN = CTCONTAS.CODI_CTA AND TD_LANCTO_POSSUI_SCP.EXISTE = 1) AS TDDEBITO_COM_SCP, LATERAL(SELECT COALESCE(SUM(CTLANCTO.VLOR_LAN), 0) AS VALOR, MAX(CTLANCTO.CCRE_LAN) AS CONTA_CREDITO FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'C')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP, LATERAL(SELECT COUNT(1) AS EXISTE FROM BETHADBA.CTLANCTO_SCP AS SCP WHERE SCP.CODI_EMP = CTLANCTO.CODI_EMP AND SCP.NUME_LAN = CTLANCTO.NUME_LAN AND SCP.CODI_LOTE = CTLANCTO.CODI_LOTE AND SCP.FILIAL = CTLANCTO.FILI_LAN AND SCP.TIPO = 'C') AS TD_LANCTO_POSSUI_SCP WHERE CTLANCTO.CODI_EMP = CTPARMTO.CODI_EMP AND CTLANCTO.FILI_LAN = TD_FILIAL.CODIGO_FILIAL AND CTLANCTO.DATA_LAN_BUSCA < ##DATA_INICIAL_SQL## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CCRE_LAN = CTCONTAS.CODI_CTA AND TD_SCP.EXISTE = 1 AND TD_LANCTO_POSSUI_SCP.EXISTE = 0 AND CTSELECAO_SCP.FILIAL IS NULL AND CTSELECAO_SCP.I_SCP IS NULL) AS TDCREDITO_SEM_SCP, LATERAL(SELECT COALESCE(SUM(CTLANCTO.VLOR_LAN), 0) AS VALOR, MAX(CTLANCTO.CCRE_LAN) AS CONTA_CREDITO FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'C')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP, LATERAL(SELECT COUNT(1) AS EXISTE FROM BETHADBA.CTLANCTO_SCP AS SCP WHERE SCP.CODI_EMP = CTLANCTO.CODI_EMP AND SCP.NUME_LAN = CTLANCTO.NUME_LAN AND SCP.CODI_LOTE = CTLANCTO.CODI_LOTE AND SCP.FILIAL = CTLANCTO.FILI_LAN AND SCP.TIPO = 'C' AND SCP.I_SCP = CTSELECAO_SCP.I_SCP) AS TD_LANCTO_POSSUI_SCP WHERE CTLANCTO.CODI_EMP = CTPARMTO.CODI_EMP AND CTLANCTO.FILI_LAN = TD_FILIAL.CODIGO_FILIAL AND CTLANCTO.DATA_LAN_BUSCA < ##DATA_INICIAL_SQL## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CCRE_LAN = CTCONTAS.CODI_CTA AND TD_LANCTO_POSSUI_SCP.EXISTE = 1) AS TDCREDITO_COM_SCP, LATERAL(SELECT (COALESCE(TDDEBITO_SEM_SCP.VALOR, 0) + COALESCE(TDDEBITO_COM_SCP.VALOR, 0)) AS VALOR FROM DSDBA.DUMMY) AS TDDEBITO, LATERAL(SELECT (COALESCE(TDCREDITO_SEM_SCP.VALOR, 0) + COALESCE(TDCREDITO_COM_SCP.VALOR, 0)) AS VALOR FROM DSDBA.DUMMY) AS TDCREDITO, LATERAL(SELECT COUNT(*) AS QTDE FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'D')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP, LATERAL(SELECT COUNT(1) AS EXISTE FROM BETHADBA.CTLANCTO_SCP AS SCP WHERE SCP.CODI_EMP = CTLANCTO.CODI_EMP AND SCP.NUME_LAN = CTLANCTO.NUME_LAN AND SCP.CODI_LOTE = CTLANCTO.CODI_LOTE AND SCP.FILIAL = CTLANCTO.FILI_LAN AND SCP.TIPO = 'D') AS TD_LANCTO_POSSUI_SCP WHERE CTLANCTO.CODI_EMP = CTPARMTO.CODI_EMP AND CTLANCTO.FILI_LAN = TD_FILIAL.CODIGO_FILIAL AND CTLANCTO.DATA_LAN_BUSCA >= ##DATA_INICIAL_SQL## AND CTLANCTO.DATA_LAN_BUSCA <= ##DATA_FINAL_SQL## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CDEB_LAN = CTCONTAS.CODI_CTA AND TD_LANCTO_POSSUI_SCP.EXISTE = 0 AND CTSELECAO_SCP.FILIAL IS NULL AND CTSELECAO_SCP.I_SCP IS NULL) AS TDEXISTE_DEBITO_SEM_SCP, LATERAL(SELECT COUNT(*) AS QTDE FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'D')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP, LATERAL(SELECT COUNT(1) AS EXISTE FROM BETHADBA.CTLANCTO_SCP AS SCP WHERE SCP.CODI_EMP = CTLANCTO.CODI_EMP AND SCP.NUME_LAN = CTLANCTO.NUME_LAN AND SCP.CODI_LOTE = CTLANCTO.CODI_LOTE AND SCP.FILIAL = CTLANCTO.FILI_LAN AND SCP.TIPO = 'D' AND SCP.I_SCP = CTSELECAO_SCP.I_SCP) AS TD_LANCTO_POSSUI_SCP WHERE CTLANCTO.CODI_EMP = CTPARMTO.CODI_EMP AND CTLANCTO.FILI_LAN = TD_FILIAL.CODIGO_FILIAL AND CTLANCTO.DATA_LAN_BUSCA >= ##DATA_INICIAL_SQL## AND CTLANCTO.DATA_LAN_BUSCA <= ##DATA_FINAL_SQL## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CDEB_LAN = CTCONTAS.CODI_CTA AND TD_LANCTO_POSSUI_SCP.EXISTE = 1) AS TDEXISTE_DEBITO_COM_SCP, LATERAL(SELECT COUNT(*) AS QTDE FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'C')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP, LATERAL(SELECT COUNT(1) AS EXISTE FROM BETHADBA.CTLANCTO_SCP AS SCP WHERE SCP.CODI_EMP = CTLANCTO.CODI_EMP AND SCP.NUME_LAN = CTLANCTO.NUME_LAN AND SCP.CODI_LOTE = CTLANCTO.CODI_LOTE AND SCP.FILIAL = CTLANCTO.FILI_LAN AND SCP.TIPO = 'C') AS TD_LANCTO_POSSUI_SCP WHERE CTLANCTO.CODI_EMP = CTPARMTO.CODI_EMP AND CTLANCTO.FILI_LAN = TD_FILIAL.CODIGO_FILIAL AND CTLANCTO.DATA_LAN_BUSCA >= ##DATA_INICIAL_SQL## AND CTLANCTO.DATA_LAN_BUSCA <= ##DATA_FINAL_SQL## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CCRE_LAN = CTCONTAS.CODI_CTA AND TD_LANCTO_POSSUI_SCP.EXISTE = 0 AND CTSELECAO_SCP.FILIAL IS NULL AND CTSELECAO_SCP.I_SCP IS NULL) AS TDEXISTE_CREDITO_SEM_SCP, LATERAL(SELECT COUNT(*) AS QTDE FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'C')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP, LATERAL(SELECT COUNT(1) AS EXISTE FROM BETHADBA.CTLANCTO_SCP AS SCP WHERE SCP.CODI_EMP = CTLANCTO.CODI_EMP AND SCP.NUME_LAN = CTLANCTO.NUME_LAN AND SCP.CODI_LOTE = CTLANCTO.CODI_LOTE AND SCP.FILIAL = CTLANCTO.FILI_LAN AND SCP.TIPO = 'C' AND SCP.I_SCP = CTSELECAO_SCP.I_SCP) AS TD_LANCTO_POSSUI_SCP WHERE CTLANCTO.CODI_EMP = CTPARMTO.CODI_EMP AND CTLANCTO.FILI_LAN = TD_FILIAL.CODIGO_FILIAL AND CTLANCTO.DATA_LAN_BUSCA >= ##DATA_INICIAL_SQL## AND CTLANCTO.DATA_LAN_BUSCA <= ##DATA_FINAL_SQL## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CCRE_LAN = CTCONTAS.CODI_CTA AND TD_LANCTO_POSSUI_SCP.EXISTE = 1) AS TDEXISTE_CREDITO_COM_SCP, LATERAL(SELECT (COALESCE(TDEXISTE_DEBITO_SEM_SCP.QTDE, 0) + COALESCE(TDEXISTE_DEBITO_COM_SCP.QTDE, 0)) AS QTDE FROM DSDBA.DUMMY) AS TDEXISTE_DEBITO, LATERAL(SELECT (COALESCE(TDEXISTE_CREDITO_SEM_SCP.QTDE, 0) + COALESCE(TDEXISTE_CREDITO_COM_SCP.QTDE, 0)) AS QTDE FROM DSDBA.DUMMY) AS TDEXISTE_CREDITO, LATERAL ( SELECT MAX ( R.CLAS_CTA ) AS CLAS_CTA FROM BETHADBA.CTNATUREZA_CONTA R WHERE R.CODI_EMP = CTPARMTO.CODI_EMP AND R.CLAS_CTA = LEFT ( CTCONTAS.CLAS_CTA, LENGTH ( R.CLAS_CTA ) ) ) AS TD_MAX_NATUREZA, LATERAL ( SELECT COALESCE(MIN(R.NATUREZA), '') AS NATUREZA, COALESCE(MIN(R.GRUPO), '') AS GRUPO FROM BETHADBA.CTNATUREZA_CONTA R WHERE R.CODI_EMP = CTPARMTO.CODI_EMP AND R.CLAS_CTA = TD_MAX_NATUREZA.CLAS_CTA ) AS TDNATUREZA WHERE CTCONTAS.CODI_EMP = ##CODI_EMP## AND/* custom */ (0 = 0 OR CTCONTAS.CODI_CTA = 0) AND (0 = 0 OR DSDBA.C_LEFT(CTCONTAS.CLAS_CTA, 0) = '') AND CTCONTAS.TIPO_CTA = DSDBA.C_CHAR (65) AND (('S' = DSDBA.C_CHAR (78) AND TDDEBITO.VALOR - TDCREDITO.VALOR <> 0 ) OR TDEXISTE_DEBITO.QTDE > 0 OR TDEXISTE_CREDITO.QTDE > 0) AND 'N' = 'S' AND ('N' = 'S' OR ('N' = 'N' AND TDNATUREZA.GRUPO <> 'C')) AND CTPARMTO.EMAT_PAR = 'S' UNION SELECT CTCONTAS.CODI_EMP AS CODI_EMP, CTCONTAS.CLAS_CTA AS CLASC, CTCONTAS.NOME_CTA AS NOMEC, CTCONTAS.CODI_CTA AS CODIC, 1 AS TIPO, DATE (##DATA_INICIAL_SQL##) AS DATALAN, 0 AS NUMELAN, TDDEBITO.VALOR - TDCREDITO.VALOR AS SALDOANT, 0 AS CONTRAP, 0 AS ORDEM_NAT_CTA, 0 AS ORIGEM, CAST(0 AS DECIMAL (13, 2)) AS VALDEB, CAST(0 AS DECIMAL (13, 2)) AS VALCRE, CAST(0 AS DECIMAL (13, 2)) AS SALDO, CAST(0 AS DECIMAL (13, 2)) AS SALDO_EXE, CTPARMTO.MASC_PAR AS MASCARA, CTPARMTO.MASC_REL AS MASCREL, CTCONTAS.NOME_CTA AS HISTORICO, CTCONTAS.NOME_CTA AS ZEBRA1, SPACE (1) AS TIPO_LAN, CURRENT TIMESTAMP AS EMISSAO, NULL AS CODI_LOTE, CAST(NULL AS VARCHAR(50)) AS NOME_FANTASIA_INCORPORACAO, 1 AS NRO_QUEBRA_INCORPORACAO, TDNATUREZA.NATUREZA AS NATUREZA, (CASE WHEN CTPARMTO.EMAT_PAR = 'S' AND CTPARMTO.SOCIEDADE_EM_CONTA_PARTICIPACAO_PAR ='S' THEN ##CODI_EMP## ELSE 0 END) AS FILIAL, COALESCE(TDSELECAO_SCP.I_SCP, 0) AS CODIGO_SCP, COALESCE(TDSELECAO_SCP.DESCRICAO, GEEMPRE.RAZAO_EMP) AS DESCRICAO_SCP, 0 AS ORDEM FROM BETHADBA.CTCONTAS AS CTCONTAS INNER JOIN BETHADBA.CTPARMTO AS CTPARMTO ON (CTPARMTO.CODI_EMP = ##CODI_EMP##), LATERAL(SELECT GEEMPRE.RAZAO_EMP AS RAZAO_EMP, GEEMPRE.CGCE_EMP AS CGCE_EMP FROM BETHADBA.GEEMPRE AS GEEMPRE WHERE GEEMPRE.CODI_EMP = CTPARMTO.CODI_EMP) AS GEEMPRE, LATERAL(SELECT COUNT(1) AS TOTAL FROM BETHADBA.CTSELECAO_SCP SELECAO_SCP WHERE SELECAO_SCP.CODI_EMP = CTPARMTO.CODI_EMP AND SELEcao_SCP.USUARIO = CURRENT USER) AS TDEXISTE_SELECAO_SCP, LATERAL(SELECT SCP.I_SCP AS I_SCP, SCP.DESCRICAO AS DESCRICAO, G.CODI_EMP AS FILIAL FROM BETHADBA.GEEMPRE G INNER JOIN BETHADBA.GESCP SCP ON G.CODI_EMP = SCP.CODI_EMP WHERE LEFT(G.CGCE_EMP, 8) = LEFT(GEEMPRE.CGCE_EMP, 8) AND ((SCP.SITUACAO = 1) OR (SCP.SITUACAO = 2 AND SCP.DATA_INATIVO >= DATE(##DATA_INICIAL_SQL##))) AND NOT EXISTS(SELECT 1 FROM BETHADBA.CTSELECAO_SCP SELECAO WHERE SELECAO.FILIAL = SCP.CODI_EMP AND SELECAO.I_SCP = SCP.I_SCP AND SELECAO.USUARIO = CURRENT USER)) AS TDSELECAO_SCP, LATERAL(SELECT COALESCE(SUM(CTLANCTO.VLOR_LAN), 0) AS VALOR, MAX(CTLANCTO.CDEB_LAN) AS CONTA_DEBITO FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'D')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP, LATERAL(SELECT COUNT(1) AS EXISTE FROM BETHADBA.CTLANCTO_SCP AS SCP WHERE SCP.CODI_EMP = CTLANCTO.CODI_EMP AND SCP.NUME_LAN = CTLANCTO.NUME_LAN AND SCP.CODI_LOTE = CTLANCTO.CODI_LOTE AND SCP.FILIAL = CTLANCTO.FILI_LAN AND SCP.TIPO = 'D' AND SCP.I_SCP = TDSELECAO_SCP.I_SCP) AS TD_LANCTO_POSSUI_SCP WHERE CTLANCTO.CODI_EMP IN (##CODI_EMP##) AND ##FILIAL_FILTER## AND CTLANCTO.DATA_LAN_BUSCA < ##DATA_INICIAL_SQL## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CDEB_LAN = CTCONTAS.CODI_CTA AND CTLANCTO.FILI_LAN = TDSELECAO_SCP.FILIAL AND TD_SCP.EXISTE = 1 AND TD_LANCTO_POSSUI_SCP.EXISTE = 1) AS TDDEBITO, LATERAL(SELECT COALESCE(SUM(CTLANCTO.VLOR_LAN), 0) AS VALOR, MAX(CTLANCTO.CCRE_LAN) AS CONTA_CREDITO FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'C')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP, LATERAL(SELECT COUNT(1) AS EXISTE FROM BETHADBA.CTLANCTO_SCP AS SCP WHERE SCP.CODI_EMP = CTLANCTO.CODI_EMP AND SCP.NUME_LAN = CTLANCTO.NUME_LAN AND SCP.CODI_LOTE = CTLANCTO.CODI_LOTE AND SCP.FILIAL = CTLANCTO.FILI_LAN AND SCP.TIPO = 'C' AND SCP.I_SCP = TDSELECAO_SCP.I_SCP) AS TD_LANCTO_POSSUI_SCP WHERE CTLANCTO.CODI_EMP IN (##CODI_EMP##) AND ##FILIAL_FILTER## AND CTLANCTO.DATA_LAN_BUSCA < ##DATA_INICIAL_SQL## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CCRE_LAN = CTCONTAS.CODI_CTA AND CTLANCTO.FILI_LAN = TDSELECAO_SCP.FILIAL AND TD_SCP.EXISTE = 1 AND TD_LANCTO_POSSUI_SCP.EXISTE = 1) AS TDCREDITO, LATERAL(SELECT COUNT(*) AS QTDE FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'D')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP, LATERAL(SELECT COUNT(1) AS EXISTE FROM BETHADBA.CTLANCTO_SCP AS SCP WHERE SCP.CODI_EMP = CTLANCTO.CODI_EMP AND SCP.NUME_LAN = CTLANCTO.NUME_LAN AND SCP.CODI_LOTE = CTLANCTO.CODI_LOTE AND SCP.FILIAL = CTLANCTO.FILI_LAN AND SCP.TIPO = 'D' AND SCP.I_SCP = TDSELECAO_SCP.I_SCP) AS TD_LANCTO_POSSUI_SCP WHERE CTLANCTO.CODI_EMP IN (##CODI_EMP##) AND ##FILIAL_FILTER## AND CTLANCTO.DATA_LAN_BUSCA >= ##DATA_INICIAL_SQL## AND CTLANCTO.DATA_LAN_BUSCA <= ##DATA_FINAL_SQL## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CDEB_LAN = CTCONTAS.CODI_CTA AND CTLANCTO.FILI_LAN = TDSELECAO_SCP.FILIAL AND TD_SCP.EXISTE = 1 AND TD_LANCTO_POSSUI_SCP.EXISTE = 1) AS TDEXISTE_DEBITO, LATERAL(SELECT COUNT(*) AS QTDE FROM BETHADBA.CTLANCTO AS CTLANCTO, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'C')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP, LATERAL(SELECT COUNT(1) AS EXISTE FROM BETHADBA.CTLANCTO_SCP AS SCP WHERE SCP.CODI_EMP = CTLANCTO.CODI_EMP AND SCP.NUME_LAN = CTLANCTO.NUME_LAN AND SCP.CODI_LOTE = CTLANCTO.CODI_LOTE AND SCP.FILIAL = CTLANCTO.FILI_LAN AND SCP.TIPO = 'C' AND SCP.I_SCP = TDSELECAO_SCP.I_SCP) AS TD_LANCTO_POSSUI_SCP WHERE CTLANCTO.CODI_EMP IN (##CODI_EMP##) AND ##FILIAL_FILTER## AND CTLANCTO.DATA_LAN_BUSCA >= ##DATA_INICIAL_SQL## AND CTLANCTO.DATA_LAN_BUSCA <= ##DATA_FINAL_SQL## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CCRE_LAN = CTCONTAS.CODI_CTA AND CTLANCTO.FILI_LAN = TDSELECAO_SCP.FILIAL AND TD_SCP.EXISTE = 1 AND TD_LANCTO_POSSUI_SCP.EXISTE = 1) AS TDEXISTE_CREDITO, LATERAL ( SELECT MAX ( R.CLAS_CTA ) AS CLAS_CTA FROM BETHADBA.CTNATUREZA_CONTA R WHERE R.CODI_EMP = CTPARMTO.CODI_EMP AND R.CLAS_CTA = LEFT ( CTCONTAS.CLAS_CTA, LENGTH ( R.CLAS_CTA ) ) ) AS TD_MAX_NATUREZA, LATERAL ( SELECT COALESCE(MIN(R.NATUREZA), '') AS NATUREZA, COALESCE(MIN(R.GRUPO), '') AS GRUPO FROM BETHADBA.CTNATUREZA_CONTA R WHERE R.CODI_EMP = CTPARMTO.CODI_EMP AND R.CLAS_CTA = TD_MAX_NATUREZA.CLAS_CTA ) AS TDNATUREZA WHERE CTCONTAS.CODI_EMP = ##CODI_EMP## AND/* custom */ (0 = 0 OR CTCONTAS.CODI_CTA = 0) AND (0 = 0 OR DSDBA.C_LEFT(CTCONTAS.CLAS_CTA, 0) = '') AND CTCONTAS.TIPO_CTA = DSDBA.C_CHAR (65) AND (('S' = DSDBA.C_CHAR (78) AND TDDEBITO.VALOR - TDCREDITO.VALOR <> 0 ) OR TDEXISTE_DEBITO.QTDE > 0 OR TDEXISTE_CREDITO.QTDE > 0) AND (TDEXISTE_SELECAO_SCP.TOTAL = 0 AND 'N' = 'S') AND ('N' = 'S' OR ('N' = 'N' AND TDNATUREZA.GRUPO <> 'C')) UNION SELECT CTLANCTO.FILI_LAN AS CODI_EMP, CTCONTAS.CLAS_CTA AS CLASC, CTCONTAS.NOME_CTA AS NOMEC, CTCONTAS.CODI_CTA AS CODIC, 2 AS TIPO, CTLANCTO.DATA_LAN AS DATALAN, CTLANCTO.NUME_LAN AS NUMELAN, 0 AS SALDOANT, COALESCE(TD_LOTE.CONTRA_PARTIDA, CTLANCTO.CCRE_LAN) AS CONTRAP, ( case when left(CTCONTAS.CLAS_CTA, 1) = '1' or left(CTCONTAS.CLAS_CTA, 1) = '4' or left(CTCONTAS.CLAS_CTA, 1) = '5' or left(CTCONTAS.CLAS_CTA, 2) = '62' or left(CTCONTAS.CLAS_CTA, 1) = '9' then case when TD_VALCREDEB.VALCRE = 0 then 0 else 1 end else case when left(CTCONTAS.CLAS_CTA, 1) = '2' or left(CTCONTAS.CLAS_CTA, 1) = '3' or left(CTCONTAS.CLAS_CTA, 2) = '61' or left(CTCONTAS.CLAS_CTA, 1) = '9' then case when TD_VALCREDEB.VALDEB = 0 then 0 else 1 end else 0 end end ) AS ORDEM_NAT_CTA, ( CASE CTLANCTO.ORIG_LAN WHEN 34 THEN 9999 WHEN 2 THEN 9000 ELSE 1 END ) AS ORIGEM, TD_VALCREDEB.VALDEB AS VALDEB, TD_VALCREDEB.VALCRE AS VALCRE, CAST ( 0 AS DECIMAL ( 13, 2 ) ) AS SALDO, CAST ( 0 AS DECIMAL ( 13, 2 ) ) AS SALDO_EXE, CTPARMTO.MASC_PAR AS MASCARA, CTPARMTO.MASC_REL AS MASCREL, TD_CONTA_CONTRA.NOME_CONTA || CTLANCTO.CHIS_LAN AS HISTORICO, TD_CONTA_CONTRA.NOME_CONTA || CTLANCTO.CHIS_LAN AS ZEBRA1, DSDBA.C_CHAR ( 68 ) AS TIPO_LAN, CURRENT TIMESTAMP AS EMISSAO, CTLANCTO.CODI_LOTE AS CODI_LOTE, COALESCE(GEFILIAL.FANTASIA_EMP, '') AS NOME_FANTASIA_INCORPORACAO, COALESCE(RET_AUX.NUMERO_QUEBRA, 1) AS NRO_QUEBRA_INCORPORACAO, TDNATUREZA.NATUREZA AS NATUREZA, TD_SCP_QUEBRA.FILIAL AS FILIAL, TD_SCP_QUEBRA.CODIGO_SCP AS CODIGO_SCP, COALESCE(GESCP.DESCRICAO, TDSEM_SCP.NOME_EMPRESA) AS DESCRICAO_SCP, 0 AS ORDEM FROM BETHADBA.CTCONTAS AS CTCONTAS INNER JOIN BETHADBA.CTPARMTO AS CTPARMTO ON (CTPARMTO.CODI_EMP = ##CODI_EMP##) INNER JOIN BETHADBA.CTLANCTO AS CTLANCTO FORCE INDEX(IDX_PLANO_DEB_EMP) ON CTLANCTO.CODI_EMP IN (##CODI_EMP##) AND ##FILIAL_FILTER## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CDEB_LAN = CTCONTAS.CODI_CTA, LATERAL(SELECT MAX(RET_AUX.NUMERO_QUEBRA) AS NUMERO_QUEBRA, MAX(RET_AUX.FANTASIA) AS FANTASIA FROM BETHADBA.CTINCORPORACAO_RET_AUX AS RET_AUX WHERE RET_AUX.CODI_EMP = CTLANCTO.CODI_EMP AND RET_AUX.FILIAL = CTLANCTO.FILI_LAN) AS RET_AUX, LATERAL(SELECT MAX(CTLANCTO_SCP.FILIAL) AS FILIAL, MAX(CTLANCTO_SCP.I_SCP) AS I_SCP FROM BETHADBA.CTLANCTO_SCP AS CTLANCTO_SCP WHERE CTLANCTO_SCP.CODI_EMP = CTLANCTO.CODI_EMP AND CTLANCTO_SCP.NUME_LAN = CTLANCTO.NUME_LAN AND CTLANCTO_SCP.CODI_LOTE = CTLANCTO.CODI_LOTE AND CTLANCTO_SCP.FILIAL = CTLANCTO.FILI_LAN AND CTLANCTO_SCP.TIPO = 'D' ) AS CTLANCTO_SCP, LATERAL(SELECT MAX(GESCP.DESCRICAO) AS DESCRICAO FROM BETHADBA.GESCP AS GESCP WHERE GESCP.CODI_EMP = CTLANCTO_SCP.FILIAL AND GESCP.I_SCP = CTLANCTO_SCP.I_SCP) AS GESCP, LATERAL(SELECT MAX(GEFILIAL.FANTASIA_EMP) AS FANTASIA_EMP FROM BETHADBA.GEEMPRE AS GEFILIAL WHERE GEFILIAL.CODI_EMP = RET_AUX.FANTASIA) AS GEFILIAL, LATERAL ( SELECT MAX(LANCTO.CCRE_LAN) AS CONTRA_PARTIDA FROM BETHADBA.CTLANCTO AS LANCTO INNER JOIN BETHADBA.CTLANCTOLOTE AS LOTE ON LANCTO.CODI_EMP = LOTE.CODI_EMP AND LANCTO.CODI_LOTE = LOTE.CODI_LOTE WHERE LANCTO.CODI_EMP = CTLANCTO.CODI_EMP AND LANCTO.CODI_LOTE = CTLANCTO.CODI_LOTE AND LOTE.TIPO = 'C') AS TD_LOTE, LATERAL(SELECT CTLANCTO.VLOR_LAN AS VALDEB, CAST ( 0 AS DECIMAL ( 13, 2 ) ) AS VALCRE FROM DSDBA.DUMMY) AS TD_VALCREDEB, LATERAL ( SELECT MAX ( R.CLAS_CTA ) AS CLAS_CTA FROM BETHADBA.CTNATUREZA_CONTA R WHERE R.CODI_EMP = CTPARMTO.CODI_EMP AND R.CLAS_CTA = LEFT ( CTCONTAS.CLAS_CTA, LENGTH ( R.CLAS_CTA ) ) ) AS TD_MAX_NATUREZA, LATERAL ( SELECT COALESCE(MIN(R.NATUREZA), '') AS NATUREZA, COALESCE(MIN(R.GRUPO), '') AS GRUPO FROM BETHADBA.CTNATUREZA_CONTA R WHERE R.CODI_EMP = CTPARMTO.CODI_EMP AND R.CLAS_CTA = TD_MAX_NATUREZA.CLAS_CTA ) AS TDNATUREZA, LATERAL(SELECT G.IJUC_EMP AS INSC_JUNTA, G.DJUC_EMP AS DATA_JUNTA FROM BETHADBA.GEEMPRE AS G WHERE G.CODI_EMP = CTPARMTO.CODI_EMP) AS TDEMPRESA, LATERAL(SELECT G.RAZAO_EMP AS NOME_EMPRESA FROM BETHADBA.GEEMPRE AS G WHERE G.CODI_EMP = CTLANCTO.FILI_LAN) AS TDSEM_SCP, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'D')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP, LATERAL(SELECT(CASE WHEN 'N' = 'S' THEN COALESCE(CTLANCTO_SCP.I_SCP, 0) ELSE 0 END) AS CODIGO_SCP, (CASE WHEN 'N' = 'S' AND CTLANCTO.CODI_EMP <> CTLANCTO.FILI_LAN THEN CTLANCTO.FILI_LAN ELSE 0 END) AS FILIAL FROM DSDBA.DUMMY) AS TD_SCP_QUEBRA, LATERAL(SELECT (CASE WHEN 'N' = 'N' THEN '' ELSE (CASE WHEN COALESCE(TD_LOTE.CONTRA_PARTIDA, CTLANCTO.CCRE_LAN) > 0 THEN (CASE WHEN 1 = 1 THEN CAST(MAX(CON.CODI_CTA) AS VARCHAR(30)) ELSE CAST(DSDBA.FG_MONTA_MASCARA_CT( CTPARMTO.MASC_REL, MAX(CON.CLAS_CTA)) AS VARCHAR(30)) END) || ' - ' || MAX(CON.NOME_CTA) || (CASE WHEN LENGTH(CTLANCTO.CHIS_LAN) > 0 THEN CHAR(13) ELSE '' END) ELSE CHAR(13) END) END) AS NOME_CONTA FROM BETHADBA.CTCONTAS AS CON WHERE CON.CODI_EMP = CTCONTAS.CODI_EMP AND CON.CODI_CTA = COALESCE(TD_LOTE.CONTRA_PARTIDA, CTLANCTO.CCRE_LAN)) AS TD_CONTA_CONTRA WHERE CTLANCTO.CODI_EMP IN (##CODI_EMP##) AND ##FILIAL_FILTER## AND CTCONTAS.CODI_EMP = ##CODI_EMP## AND/* custom */ CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND (0 = 0 OR CTCONTAS.CODI_CTA = 0) AND (0 = 0 OR DSDBA.C_LEFT (CTCONTAS.CLAS_CTA, 0) = '') AND CTCONTAS.TIPO_CTA = DSDBA.C_CHAR (65) AND CTLANCTO.CDEB_LAN = CTCONTAS.CODI_CTA AND CTLANCTO.DATA_LAN_BUSCA >= ##DATA_INICIAL_SQL## AND CTLANCTO.DATA_LAN_BUSCA <= ##DATA_FINAL_SQL## AND (CTPARMTO.SOCIEDADE_EM_CONTA_PARTICIPACAO_PAR = 'N' OR (CTPARMTO.SOCIEDADE_EM_CONTA_PARTICIPACAO_PAR = 'S' AND TD_SCP.EXISTE = 1)) AND ('N' = 'S' OR ('N' = 'N' AND TDNATUREZA.GRUPO <> 'C')) UNION SELECT CTLANCTO.FILI_LAN AS CODI_EMP, CTCONTAS.CLAS_CTA AS CLASC, CTCONTAS.NOME_CTA AS NOMEC, CTCONTAS.CODI_CTA AS CODIC, 2 AS TIPO, CTLANCTO.DATA_LAN AS DATALAN, CTLANCTO.NUME_LAN AS NUMELAN, 0 AS SALDOANT, COALESCE(TD_LOTE.CONTRA_PARTIDA, CTLANCTO.CDEB_LAN) AS CONTRAP, ( case when left(CTCONTAS.CLAS_CTA, 1) = '1' or left(CTCONTAS.CLAS_CTA, 1) = '4' or left(CTCONTAS.CLAS_CTA, 1) = '5' or left(CTCONTAS.CLAS_CTA, 2) = '62' or left(CTCONTAS.CLAS_CTA, 1) = '9' then case when TD_VALCREDEB.VALCRE = 0 then 0 else 1 end else case when left(CTCONTAS.CLAS_CTA, 1) = '2' or left(CTCONTAS.CLAS_CTA, 1) = '3' or left(CTCONTAS.CLAS_CTA, 2) = '61' or left(CTCONTAS.CLAS_CTA, 1) = '9' then case when TD_VALCREDEB.VALDEB = 0 then 0 else 1 end else 0 end end ) AS ORDEM_NAT_CTA, ( CASE CTLANCTO.ORIG_LAN WHEN 34 THEN 9999 WHEN 2 THEN 9000 ELSE 1 END ) AS ORIGEM, TD_VALCREDEB.VALDEB AS VALDEB, TD_VALCREDEB.VALCRE AS VALCRE, CAST ( 0 AS DECIMAL ( 13, 2 ) ) AS SALDO, CAST ( 0 AS DECIMAL ( 13, 2 ) ) AS SALDO_EXE, CTPARMTO.MASC_PAR AS MASCARA, CTPARMTO.MASC_REL AS MASCREL, TD_CONTA_CONTRA.NOME_CONTA || CTLANCTO.CHIS_LAN AS HISTORICO, TD_CONTA_CONTRA.NOME_CONTA || CTLANCTO.CHIS_LAN AS ZEBRA1, DSDBA.C_CHAR ( 67 ) AS TIPO_LAN, CURRENT TIMESTAMP AS EMISSAO, CTLANCTO.CODI_LOTE AS CODI_LOTE, COALESCE(GEFILIAL.FANTASIA_EMP, '') AS NOME_FANTASIA_INCORPORACAO, COALESCE(RET_AUX.NUMERO_QUEBRA, 1) AS NRO_QUEBRA_INCORPORACAO, TDNATUREZA.NATUREZA AS NATUREZA, TD_SCP_QUEBRA.FILIAL AS FILIAL, TD_SCP_QUEBRA.CODIGO_SCP AS CODIGO_SCP, COALESCE(GESCP.DESCRICAO, TDSEM_SCP.NOME_EMPRESA) AS DESCRICAO_SCP, 0 AS ORDEM FROM BETHADBA.CTCONTAS AS CTCONTAS INNER JOIN BETHADBA.CTPARMTO AS CTPARMTO ON (CTPARMTO.CODI_EMP = ##CODI_EMP##) INNER JOIN BETHADBA.CTLANCTO AS CTLANCTO FORCE INDEX(IDX_PLANO_CRE_EMP) ON CTLANCTO.CODI_EMP IN (##CODI_EMP##) AND ##FILIAL_FILTER## AND CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND CTLANCTO.CCRE_LAN = CTCONTAS.CODI_CTA, LATERAL( SELECT MAX(RET_AUX.NUMERO_QUEBRA) AS NUMERO_QUEBRA, MAX(RET_AUX.FANTASIA) AS FANTASIA FROM BETHADBA.CTINCORPORACAO_RET_AUX AS RET_AUX WHERE RET_AUX.CODI_EMP = CTLANCTO.CODI_EMP AND RET_AUX.FILIAL = CTLANCTO.FILI_LAN) AS RET_AUX, LATERAL( SELECT MAX(CTLANCTO_SCP.FILIAL) AS FILIAL, MAX(CTLANCTO_SCP.I_SCP) AS I_SCP FROM BETHADBA.CTLANCTO_SCP AS CTLANCTO_SCP WHERE CTLANCTO_SCP.CODI_EMP = CTLANCTO.CODI_EMP AND CTLANCTO_SCP.NUME_LAN = CTLANCTO.NUME_LAN AND CTLANCTO_SCP.CODI_LOTE = CTLANCTO.CODI_LOTE AND CTLANCTO_SCP.FILIAL = CTLANCTO.FILI_LAN AND CTLANCTO_SCP.TIPO = 'C' ) AS CTLANCTO_SCP, LATERAL( SELECT MAX(GESCP.DESCRICAO) AS DESCRICAO FROM BETHADBA.GESCP AS GESCP WHERE GESCP.CODI_EMP = CTLANCTO_SCP.FILIAL AND GESCP.I_SCP = CTLANCTO_SCP.I_SCP) AS GESCP, LATERAL( SELECT MAX(GEFILIAL.FANTASIA_EMP) AS FANTASIA_EMP FROM BETHADBA.GEEMPRE AS GEFILIAL WHERE GEFILIAL.CODI_EMP = RET_AUX.FANTASIA) AS GEFILIAL, LATERAL ( SELECT MAX(LANCTO.CDEB_LAN) AS CONTRA_PARTIDA FROM BETHADBA.CTLANCTO AS LANCTO INNER JOIN BETHADBA.CTLANCTOLOTE AS LOTE ON LANCTO.CODI_EMP = LOTE.CODI_EMP AND LANCTO.CODI_LOTE = LOTE.CODI_LOTE WHERE LANCTO.CODI_LOTE = CTLANCTO.CODI_LOTE AND LANCTO.CODI_EMP = CTLANCTO.CODI_EMP AND LOTE.TIPO = 'D') AS TD_LOTE, LATERAL(SELECT CAST ( 0 AS DECIMAL ( 13, 2 ) ) AS VALDEB, CTLANCTO.VLOR_LAN AS VALCRE FROM DSDBA.DUMMY) AS TD_VALCREDEB, LATERAL ( SELECT MAX ( R.CLAS_CTA ) AS CLAS_CTA FROM BETHADBA.CTNATUREZA_CONTA R WHERE R.CODI_EMP = CTPARMTO.CODI_EMP AND R.CLAS_CTA = LEFT ( CTCONTAS.CLAS_CTA, LENGTH ( R.CLAS_CTA ) ) ) AS TD_MAX_NATUREZA, LATERAL ( SELECT COALESCE(MIN(R.NATUREZA), '') AS NATUREZA, COALESCE(MIN(R.GRUPO), '') AS GRUPO FROM BETHADBA.CTNATUREZA_CONTA R WHERE R.CODI_EMP = CTPARMTO.CODI_EMP AND R.CLAS_CTA = TD_MAX_NATUREZA.CLAS_CTA ) AS TDNATUREZA, LATERAL(SELECT G.IJUC_EMP AS INSC_JUNTA, G.DJUC_EMP AS DATA_JUNTA FROM BETHADBA.GEEMPRE AS G WHERE G.CODI_EMP = CTPARMTO.CODI_EMP) AS TDEMPRESA, LATERAL(SELECT G.RAZAO_EMP AS NOME_EMPRESA FROM BETHADBA.GEEMPRE AS G WHERE G.CODI_EMP = CTLANCTO.FILI_LAN) AS TDSEM_SCP, LATERAL(SELECT (DSDBA.FG_EXISTE_VINCULO_LANCTO_SCP(CTLANCTO.CODI_EMP, CTLANCTO.NUME_LAN, CTLANCTO.CODI_LOTE, CTLANCTO.FILI_LAN, 'C')) AS EXISTE FROM DSDBA.DUMMY) AS TD_SCP, LATERAL(SELECT(CASE WHEN 'N' = 'S' THEN COALESCE(CTLANCTO_SCP.I_SCP, 0) ELSE 0 END) AS CODIGO_SCP, (CASE WHEN 'N' = 'S' AND CTLANCTO.CODI_EMP <> CTLANCTO.FILI_LAN THEN CTLANCTO.FILI_LAN ELSE 0 END) AS FILIAL FROM DSDBA.DUMMY) AS TD_SCP_QUEBRA, LATERAL(SELECT (CASE WHEN 'N' = 'N' THEN '' ELSE (CASE WHEN COALESCE(TD_LOTE.CONTRA_PARTIDA, CTLANCTO.CDEB_LAN) > 0 THEN (CASE WHEN 1 = 1 THEN CAST(MAX(CON.CODI_CTA) AS VARCHAR(30)) ELSE CAST(DSDBA.FG_MONTA_MASCARA_CT( CTPARMTO.MASC_REL, MAX(CON.CLAS_CTA)) AS VARCHAR(30)) END) || ' - ' || MAX(CON.NOME_CTA) || (CASE WHEN LENGTH(CTLANCTO.CHIS_LAN) > 0 THEN CHAR(13) ELSE '' END) ELSE CHAR(13) END) END) AS NOME_CONTA FROM BETHADBA.CTCONTAS AS CON WHERE CON.CODI_EMP = CTCONTAS.CODI_EMP AND CON.CODI_CTA = COALESCE(TD_LOTE.CONTRA_PARTIDA, CTLANCTO.CDEB_LAN)) AS TD_CONTA_CONTRA WHERE CTLANCTO.CODI_EMP IN (##CODI_EMP##) AND ##FILIAL_FILTER## AND CTCONTAS.CODI_EMP = ##CODI_EMP## AND/* custom */ CTLANCTO.CODI_EMP_PLANO = CTCONTAS.CODI_EMP AND (0 = 0 OR CTCONTAS.CODI_CTA = 0) AND (0 = 0 OR DSDBA.C_LEFT ( CTCONTAS.CLAS_CTA, 0) = '') AND CTCONTAS.TIPO_CTA = DSDBA.C_CHAR(65) AND CTLANCTO.CCRE_LAN = CTCONTAS.CODI_CTA AND CTLANCTO.DATA_LAN_BUSCA >= ##DATA_INICIAL_SQL## AND CTLANCTO.DATA_LAN_BUSCA <= ##DATA_FINAL_SQL## AND (CTPARMTO.SOCIEDADE_EM_CONTA_PARTICIPACAO_PAR = 'N' OR (CTPARMTO.SOCIEDADE_EM_CONTA_PARTICIPACAO_PAR = 'S' AND TD_SCP.EXISTE = 1)) AND ('N' = 'S' OR ('N' = 'N' AND TDNATUREZA.GRUPO <> 'C'))) TD_DADOS_RAZAO, LATERAL(SELECT FIRST COUNT(1) AS TOTAL FROM BETHADBA.CTSELECAO_CONTA_REDUTORA CONTA_REDUTORA WHERE CONTA_REDUTORA.CODI_EMP = ##CODI_EMP## AND CONTA_REDUTORA.CODI_CTA = TD_DADOS_RAZAO.CODIC) TD_CONTA_REDUTORA, LATERAL(SELECT CASE WHEN CTPARMTO.EMAT_PAR = 'S' AND CTPARMTO.SOCIEDADE_EM_CONTA_PARTICIPACAO_PAR ='S' THEN 'S' ELSE 'N' END AS TEM_SCP FROM BETHADBA.CTPARMTO AS CTPARMTO WHERE CTPARMTO.CODI_EMP = ##CODI_EMP##) TD_VALIDA_SCP, LATERAL(SELECT G.RAZAO_EMP AS RAZAO_EMP FROM BETHADBA.GEEMPRE AS G WHERE G.CODI_EMP = ##CODI_EMP##) TD_NOME_SCP
"""

def formatar_tempo(segundos):
    """Formata segundos em uma string legível de tempo"""
    if segundos < 60:
        return f"{segundos:.1f} segundos"
    elif segundos < 3600:
        minutos = int(segundos // 60)
        seg = segundos % 60
        return f"{minutos}min {seg:.1f}s"
    else:
        horas = int(segundos // 3600)
        minutos = int((segundos % 3600) // 60)
        seg = segundos % 60
        return f"{horas}h {minutos}min {seg:.1f}s"

def cronometro_passo(func_nome, tempo_inicio, tempo_fim):
    """Exibe o tempo de execução de um passo"""
    duracao = tempo_fim - tempo_inicio
    print(f"   ⏱️  {func_nome}: {formatar_tempo(duracao)}")
    return duracao

def format_cpf_cnpj(value):
    """Formata uma string de números como CPF ou CNPJ."""
    if not value or not isinstance(value, str) or not value.isdigit():
        return value
    value = value.strip()
    if len(value) == 11:
        return f'{value[:3]}.{value[3:6]}.{value[6:9]}-{value[9:]}'
    if len(value) == 14:
        return f'{value[:2]}.{value[2:5]}.{value[5:8]}/{value[8:12]}-{value[12:]}'
    return value

def obter_traducoes_idioma(cursor, idioma_ingles=False):
    """
    Retorna um dicionário de traduções para as labels do relatório.
    Se `idioma_ingles` for True, retornamos labels em inglês; caso contrário,
    retornamos em português.

    A implementação tenta usar o banco se necessário no futuro, mas por
    enquanto fornece um fallback estático para evitar dependências.
    """
    try:
        if idioma_ingles:
            return {
                'empresa': 'Company',
                'cnpj': 'C.N.P.J.',
                'periodo': 'Period',
                'razao': 'LEDGER',
                'folha': 'Page',
                'emissao': 'Issued',
                'hora': 'Time',
                'data': 'Date',
                'lote_historico': 'Reg. Narration',
                'conta_contrapart': 'Contra',
                'filial': 'Branch',
                'debito': 'Debit',
                'credito': 'Credit',
                'saldo_exercicio': 'Ending Balance',
                'conta': 'Account',
                'saldo_anterior': 'Previous Balance',
                'total_conta': 'Account Total'
            }
        else:
            return {
                'empresa': 'Empresa',
                'cnpj': 'C.N.P.J.',
                'periodo': 'Período',
                'razao': 'RAZÃO',
                'folha': 'Folha',
                'emissao': 'Emissão',
                'hora': 'Hora',
                'data': 'Data',
                'lote_historico': 'Lote Histórico',
                'conta_contrapart': 'Cta.C.Part.',
                'filial': 'Filial',
                'debito': 'Débito',
                'credito': 'Crédito',
                'saldo_exercicio': 'Saldo-Exercício',
                'conta': 'Conta',
                'saldo_anterior': 'SALDO ANTERIOR',
                'total_conta': 'Total da conta'
            }
    except Exception as e:
        print(f"Erro ao buscar traduções: {e}")
        # Fallback em português
        return {
            'empresa': 'Empresa',
            'cnpj': 'C.N.P.J.',
            'periodo': 'Período',
            'razao': 'RAZÃO',
            'folha': 'Folha',
            'emissao': 'Emissão',
            'hora': 'Hora',
            'data': 'Data',
            'lote_historico': 'Lote Histórico',
            'conta_contrapart': 'Cta.C.Part.',
            'filial': 'Filial',
            'debito': 'Débito',
            'credito': 'Crédito',
            'saldo_exercicio': 'Saldo-Exercício',
            'conta': 'Conta',
            'saldo_anterior': 'SALDO ANTERIOR',
            'total_conta': 'Total da conta'
        }

def determinar_filtro_filial(cursor, codi_emp, filiais_flag):
    """
    Determina o filtro para ##FILIAL_FILTER##, forçando sempre a busca por todas as filiais do mesmo grupo de CNPJ.
    
    Returns:
        str: Filtro SQL para ser usado no ##FILIAL_FILTER##
    """
    
    if not filiais_flag:
        # Se a flag 'filiais' for False, continua buscando apenas a empresa principal.
        print(f"  -> Filtro de filial: Apenas a empresa principal {codi_emp}")
        return f"CTLANCTO.FILI_LAN = {codi_emp}"
    
    # Se filiais_flag for True, executa a lógica de buscar todas as filiais do grupo
    print("  -> Forçando a busca por todas as filiais do mesmo grupo de CNPJ...")
    
    # PASSO 1: Buscar CNPJ da empresa principal
    cursor.execute("SELECT cgce_emp FROM bethadba.geempre WHERE codi_emp = ?", codi_emp)
    emp_data = cursor.fetchone()
    if not emp_data or not emp_data.cgce_emp:
        print(f"    -> AVISO: Não foi possível encontrar o CNPJ da empresa {codi_emp}. Usando apenas a própria empresa como filtro.")
        return f"CTLANCTO.FILI_LAN IN ({codi_emp}, {codi_emp})"
        
    cnpj_raiz = emp_data.cgce_emp[:8]
    print(f"    -> Raiz do CNPJ identificada: {cnpj_raiz}")
    
    # PASSO 2: Buscar todas as filiais do mesmo grupo (ativas no módulo contábil)
    sql_filiais = """
        SELECT CODI_EMP, APEL_EMP FROM BETHADBA.GEEMPRE
        WHERE (UCTA_EMP = 1 OR UCXA_EMP = 1) AND LEFT(CGCE_EMP, 8) = ?
        ORDER BY APEL_EMP
    """
    cursor.execute(sql_filiais, cnpj_raiz)
    filiais_encontradas = cursor.fetchall()
    
    # Montar lista de códigos de todas as empresas do grupo
    codigos_grupo = [str(f.CODI_EMP) for f in filiais_encontradas]
    
    if not codigos_grupo:
         print(f"    -> Nenhuma filial encontrada. Usando apenas a empresa principal {codi_emp}.")
         codigos_grupo = [str(codi_emp)]
         
    # PASSO 3: Montar a string do filtro SQL
    # Duplicar a lista completa, conforme a estrutura original da consulta
    lista_duplicada = codigos_grupo + codigos_grupo
    filial_list_str = ", ".join(lista_duplicada)
    
    print(f"    -> Filiais do grupo encontradas: {', '.join(codigos_grupo)}")
    print(f"    -> Filtro SQL gerado: CTLANCTO.FILI_LAN IN ({filial_list_str})")
    
    return f"CTLANCTO.FILI_LAN IN ({filial_list_str})"

def contar_linhas_por_mes(df, traducoes):
    """
    Conta as linhas que serão geradas no Excel por mês
    """
    print("\n" + "="*60)
    print(f"📊 CONTAGEM DE LINHAS POR MÊS PARA O EXCEL")
    print("="*60)
    
    # Linhas fixas do cabeçalho
    linhas_cabecalho = 10  # Empresa, CNPJ, período, título, cabeçalhos das colunas, etc.
    linhas_assinatura = 8  # Assinaturas no final
    
    print(f"📋 Linhas fixas:")
    print(f"   • Cabeçalho: {linhas_cabecalho} linhas")
    print(f"   • Assinaturas: {linhas_assinatura} linhas")
    
    # Separar por tipo
    saldos_anteriores = df[df['TIPO'] == 1]  # Saldos anteriores
    movimentacoes = df[df['TIPO'] == 2]      # Movimentações
    
    print(f"\n📈 Resumo dos dados:")
    print(f"   • Total de contas: {len(saldos_anteriores)}")
    print(f"   • Total de movimentações: {len(movimentacoes)}")
    
    # Linhas por conta (saldo anterior + total + espaços)
    linhas_por_conta = len(saldos_anteriores) * 4  # Cabeçalho conta + saldo anterior + total + espaços
    
    # Contar movimentações por mês
    if not movimentacoes.empty:
        movimentacoes_copy = movimentacoes.copy()
        movimentacoes_copy['MES_ANO'] = movimentacoes_copy['DATALAN'].dt.to_period('M')
        contagem_mensal = movimentacoes_copy.groupby('MES_ANO').size()
        
        print(f"\n📅 MOVIMENTAÇÕES POR MÊS:")
        print("-" * 40)
        
        total_movimentacoes = 0
        for mes_ano, qtd in contagem_mensal.items():
            mes_nome = mes_ano.strftime('%B/%Y').upper()
            print(f"   {mes_nome:15} : {qtd:>8,} movimentações")
            total_movimentacoes += qtd
        
        print("-" * 40)
        print(f"   {'TOTAL':15} : {total_movimentacoes:>8,} movimentações")
        
        # Estimativa total de linhas
        total_estimado = (linhas_cabecalho + 
                         linhas_por_conta + 
                         total_movimentacoes + 
                         linhas_assinatura)
        
        print(f"\n📊 ESTIMATIVA TOTAL DE LINHAS NO EXCEL:")
        print("-" * 50)
        print(f"   Cabeçalho              : {linhas_cabecalho:>8,}")
        print(f"   Formatação das contas  : {linhas_por_conta:>8,}")
        print(f"   Movimentações          : {total_movimentacoes:>8,}")
        print(f"   Assinaturas            : {linhas_assinatura:>8,}")
        print("-" * 50)
        print(f"   TOTAL ESTIMADO         : {total_estimado:>8,}")
        
        # Verificar se excede limite do Excel
        limite_excel = 1_048_576
        if total_estimado > limite_excel:
            excesso = total_estimado - limite_excel
            print(f"\n⚠️  ATENÇÃO: EXCEDE LIMITE DO EXCEL!")
            print(f"   Limite máximo          : {limite_excel:>8,}")
            print(f"   Excesso                : {excesso:>8,}")
            print(f"   Percentual excedido    : {(excesso/limite_excel)*100:.1f}%")
        else:
            folga = limite_excel - total_estimado
            print(f"\n✅ DENTRO DO LIMITE DO EXCEL")
            print(f"   Limite máximo          : {limite_excel:>8,}")
            print(f"   Folga disponível       : {folga:>8,}")
            
    print("="*60)

def dividir_por_meses_automatico(df, limite_linhas=900000):
    """
    Divide o DataFrame em grupos de meses que não excedam o limite de linhas
    """
    print("\n" + "="*60)
    print("🔄 DIVISÃO AUTOMÁTICA POR MESES")
    print("="*60)
    
    # Separar por tipo
    saldos_anteriores = df[df['TIPO'] == 1]
    movimentacoes = df[df['TIPO'] == 2].copy()
    
    if movimentacoes.empty:
        return [df]  # Retorna o DataFrame original se não há movimentações
    
    # Calcular linhas fixas por planilha
    linhas_fixas_por_planilha = 10 + (len(saldos_anteriores) * 4) + 8  # cabeçalho + contas + assinaturas
    limite_movimentacoes = limite_linhas - linhas_fixas_por_planilha
    
    print(f"📊 Configuração:")
    print(f"   • Limite por planilha: {limite_linhas:,} linhas")
    print(f"   • Linhas fixas: {linhas_fixas_por_planilha:,}")
    print(f"   • Limite para movimentações: {limite_movimentacoes:,}")
    
    # Contar movimentações por mês
    movimentacoes['MES_ANO'] = movimentacoes['DATALAN'].dt.to_period('M')
    contagem_mensal = movimentacoes.groupby('MES_ANO').size().sort_index()
    
    # Agrupar meses sequencialmente
    grupos = []
    grupo_atual = []
    total_atual = 0
    
    print(f"\n📅 AGRUPAMENTO DOS MESES:")
    print("-" * 50)
    
    for mes_ano, qtd_movimentos in contagem_mensal.items():
        # Verificar se adicionar este mês excederia o limite
        if total_atual + qtd_movimentos > limite_movimentacoes and grupo_atual:
            # Fechar grupo atual e iniciar novo
            grupos.append({
                'meses': grupo_atual.copy(),
                'total_movimentos': total_atual,
                'periodo': f"{grupo_atual[0].strftime('%m_%Y')}_a_{grupo_atual[-1].strftime('%m_%Y')}"
            })
            print(f"   📋 Grupo {len(grupos):2d}: {grupo_atual[0].strftime('%b/%Y')} a {grupo_atual[-1].strftime('%b/%Y')} = {total_atual:>8,} movimentações")
            
            # Iniciar novo grupo
            grupo_atual = [mes_ano]
            total_atual = qtd_movimentos
        else:
            # Adicionar mês ao grupo atual
            grupo_atual.append(mes_ano)
            total_atual += qtd_movimentos
    
    # Adicionar último grupo
    if grupo_atual:
        grupos.append({
            'meses': grupo_atual.copy(),
            'total_movimentos': total_atual,
            'periodo': f"{grupo_atual[0].strftime('%m_%Y')}_a_{grupo_atual[-1].strftime('%m_%Y')}"
        })
        print(f"   📋 Grupo {len(grupos):2d}: {grupo_atual[0].strftime('%b/%Y')} a {grupo_atual[-1].strftime('%b/%Y')} = {total_atual:>8,} movimentações")
    
    print("-" * 50)
    print(f"   📊 TOTAL: {len(grupos)} planilhas serão criadas")
    
    # Criar DataFrames para cada grupo
    dataframes_resultado = []
    
    for i, grupo in enumerate(grupos, 1):
        print(f"\n🔧 Preparando dados para planilha {i}...")
        
        # Filtrar movimentações do período
        meses_grupo = grupo['meses']
        movimentos_periodo = movimentacoes[movimentacoes['MES_ANO'].isin(meses_grupo)]
        
        # Obter contas que tiveram movimento no período
        contas_com_movimento = set(movimentos_periodo['CODIC'].unique())
        
        # Filtrar saldos anteriores apenas para contas com movimento
        saldos_periodo = saldos_anteriores[saldos_anteriores['CODIC'].isin(contas_com_movimento)]
        
        # Combinar saldos + movimentos
        df_grupo = pd.concat([saldos_periodo, movimentos_periodo], ignore_index=True)
        
        # Adicionar metadados do grupo
        df_grupo.attrs = {
            'grupo_numero': i,
            'periodo': grupo['periodo'],
            'meses': [mes.strftime('%b/%Y') for mes in meses_grupo],
            'total_movimentos': grupo['total_movimentos'],
            'total_contas': len(contas_com_movimento)
        }
        
        dataframes_resultado.append(df_grupo)
        
        print(f"   ✅ Planilha {i}: {len(contas_com_movimento)} contas, {grupo['total_movimentos']:,} movimentações")
    
    print("="*60)
    return dataframes_resultado

def gerar_multiplas_planilhas_excel(grupos_df, empresa_info, data_inicial, data_final, codi_emp, traducoes, timestamp_str, idioma_ingles=False):
    """
    Gera múltiplos arquivos Excel a partir dos grupos de dados
    """
    print(f"\n📁 GERANDO {len(grupos_df)} ARQUIVOS EXCEL...")
    print("-" * 50)
    
    arquivos_gerados = []
    tempo_inicio_excel = time.time()
    
    lang_suffix = '_EN' if idioma_ingles else ''
    for df_grupo in grupos_df:
        tempo_inicio_arquivo = time.time()

        # Recuperar metadados
        grupo_num = df_grupo.attrs['grupo_numero']
        periodo = df_grupo.attrs['periodo']
        meses_nomes = df_grupo.attrs['meses']
        total_movimentos = df_grupo.attrs['total_movimentos']
        total_contas = df_grupo.attrs['total_contas']

        # Nome do arquivo com timestamp e idioma
        filename = f"razao_emp_{codi_emp}_{periodo}{lang_suffix}_{timestamp_str}.xlsx"

        # Atualizar período no empresa_info
        empresa_info_grupo = empresa_info.copy()
        empresa_info_grupo['periodo'] = f"{meses_nomes[0]} - {meses_nomes[-1]}"

        print(f"   📄 Gerando: {filename}")
        print(f"      • Período: {meses_nomes[0]} a {meses_nomes[-1]}")
        print(f"      • {total_contas} contas, {total_movimentos:,} movimentações")

        # Gerar Excel
        format_excel_report(df_grupo, filename, empresa_info_grupo, traducoes)
        arquivos_gerados.append(filename)

        tempo_fim_arquivo = time.time()
        duracao_arquivo = tempo_fim_arquivo - tempo_inicio_arquivo
        print(f"      ✅ Concluído em {formatar_tempo(duracao_arquivo)}!")
    
    tempo_fim_excel = time.time()
    duracao_total_excel = tempo_fim_excel - tempo_inicio_excel
    
    print("-" * 50)
    print(f"🎉 SUCESSO! {len(arquivos_gerados)} arquivos Excel gerados em {formatar_tempo(duracao_total_excel)}:")
    for arquivo in arquivos_gerados:
        print(f"   • {arquivo}")
    
    # Padroniza retorno: dict com arquivos gerados (igual DRE/BALANCETE)
    result = {}
    # XLSX principal (pode ser múltiplos, mas pega o primeiro como principal)
    if arquivos_gerados:
        # Se só um arquivo, retorna como xlsx
        if len(arquivos_gerados) == 1:
            result["xlsx"] = arquivos_gerados[0]
        else:
            # Se múltiplos, retorna lista em xlsx
            result["xlsx"] = arquivos_gerados
    # JSON dump sempre
    result["json"] = dump_filename if 'dump_filename' in locals() else None
    return result

def aplicar_mascara_conta(clasc, mascrel):
    """
    Aplica a máscara ao código da conta baseado no MASCREL
    
    Args:
        clasc: Classificação da conta (ex: 1110020001)
        mascrel: Máscara de relatório (ex: 9.9.9.999.9999)
    
    Returns:
        str: Código da conta com máscara aplicada
    """
    if not clasc or not mascrel:
        return clasc
    
    try:
        clasc_str = str(clasc)
        mascrel_str = str(mascrel)
        
        # Aplica a máscara caractere por caractere
        resultado = ""
        pos_clasc = 0
        
        for char_mascara in mascrel_str:
            if char_mascara == '9':  # Posição de dígito
                if pos_clasc < len(clasc_str):
                    resultado += clasc_str[pos_clasc]
                    pos_clasc += 1
                else:
                    break
            else:  # Caractere da máscara (ponto, traço, etc.)
                resultado += char_mascara
        
        return resultado
    except:
        return clasc  # Retorna original em caso de erro

def format_excel_report(df, filename, empresa_info, traducoes):
    """
    Cria e formata um arquivo Excel replicando o layout do relatório Razão,
    com todos os ajustes de layout solicitados e suporte a idiomas.
    """
    
    # Definição das fontes e estilos
    header_font = Font(bold=True, size=14)
    right_align = Alignment(horizontal='right')
    center_align = Alignment(horizontal='center')
    thin_border = Border(left=Side(style='thin'), right=Side(style='thin'), top=Side(style='thin'), bottom=Side(style='thin'))

    normal_font_small = Font(size=7)
    bold_font_small = Font(bold=True, size=7)

    grouped = df.groupby(['CODIC', 'CLASC', 'NOMEC'])

    wb = Workbook()
    ws = wb.active
    ws.title = traducoes['razao']
    
    ws.sheet_view.showGridLines = False
    
    current_row = 1

    # Definir o número máximo de colunas baseado no idioma
    max_col = 'F' if traducoes.get('filial') == 'Branch' else 'H'  # F para inglês, H para português

    # Cabeçalho do Relatório
    # sanitize helper to remove control chars that break openpyxl
    def sanitize_text(s):
        if s is None:
            return s
        try:
            t = str(s)
            # remove C0 control characters (0x00-0x1F) and DEL (0x7F)
            return re.sub(r'[\x00-\x1F\x7F]', ' ', t)
        except Exception:
            return s

    ws.merge_cells('A1:C1'); ws['A1'] = sanitize_text(f"{traducoes['empresa']}: {empresa_info.get('razao_emp', 'N/A')}")
    ws.merge_cells(f'D1:{max_col}1'); ws['D1'] = sanitize_text(f"{traducoes['folha']}: {empresa_info.get('folha', '0001')}")
    ws.merge_cells('A2:C2'); ws['A2'] = sanitize_text(f"{traducoes['cnpj']}: {empresa_info.get('cgce_emp', 'N/A')}")
    ws.merge_cells(f'D2:{max_col}2'); ws['D2'] = sanitize_text(f"{traducoes['emissao']}: {datetime.now().strftime('%d/%m/%Y')}")
    ws.merge_cells('A3:C3'); ws['A3'] = sanitize_text(f"{traducoes['periodo']}: {empresa_info.get('periodo', 'N/A')}")
    ws.merge_cells(f'D3:{max_col}3'); ws['D3'] = sanitize_text(f"{traducoes['hora']}: {datetime.now().strftime('%H:%M:%S')}")
    
    current_row = 5
    ws.merge_cells(f'A{current_row}:{max_col}{current_row}'); cell = ws[f'A{current_row}']
    cell.value = traducoes['razao']; cell.font = header_font; cell.alignment = center_align
    current_row += 2

    # Cabeçalho único das colunas - ajustado conforme idioma
    if traducoes.get('filial') == 'Branch':  # Se for inglês, não inclui a coluna Branch
        col_headers = [
            traducoes['data'], 
            traducoes['lote_historico'], 
            traducoes['conta_contrapart'], 
            traducoes['debito'], 
            traducoes['credito'], 
            traducoes['saldo_exercicio']
        ]
        is_english = True
    else:  # Português, inclui todas as colunas
        col_headers = [
            traducoes['data'], 
            traducoes['lote_historico'], 
            traducoes['conta_contrapart'], 
            traducoes['filial'], 
            traducoes['debito'], 
            traducoes['credito'], 
            traducoes['saldo_exercicio']
        ]
        is_english = False
    
    for col_num, header in enumerate(col_headers, 1):
        cell = ws.cell(row=current_row, column=col_num, value=header)
        cell.font = bold_font_small
        cell.border = thin_border
    current_row += 1
    
    ws.freeze_panes = f'A{current_row}'

    for (codic, clasc, nomec), group in grouped:
        # Aplicar máscara no código da conta
        saldo_anterior_row = group[group['TIPO'] == 1].iloc[0] if not group[group['TIPO'] == 1].empty else group.iloc[0]
        mascrel = saldo_anterior_row.get('MASCREL', '')
        clasc_mascarado = aplicar_mascara_conta(clasc, mascrel)

        # Formatação da linha da conta com espaçamento adequado
        ws.cell(row=current_row, column=1, value=f"{traducoes['conta']}:").font = bold_font_small
        conta_formatada = f"{codic} - {clasc_mascarado}      {nomec}"
        ws.cell(row=current_row, column=2, value=sanitize_text(conta_formatada)).font = normal_font_small
        current_row += 1

        saldo_inicial = saldo_anterior_row.get('SALDOANT', 0)
        natureza_conta_original = saldo_anterior_row.get('NATUREZA', 'D')

        running_balance = saldo_inicial

        display_saldo = abs(running_balance)
        natureza_display = ''
        if natureza_conta_original == 'D':
            natureza_display = 'D' if running_balance >= 0 else 'C'
        elif natureza_conta_original == 'C':
            natureza_display = 'C' if running_balance <= 0 else 'D'

        ws.cell(row=current_row, column=2, value=traducoes['saldo_anterior']).font = normal_font_small
        # Ajustar coluna do saldo baseado no idioma
        saldo_col = 6 if is_english else 7  # Se inglês: col 6, se português: col 7
        saldo_cell = ws.cell(row=current_row, column=saldo_col, value=f"{display_saldo:,.2f}{natureza_display}")
        saldo_cell.alignment = right_align; saldo_cell.font = normal_font_small
        current_row += 1

        movimentos = group[group['TIPO'] == 2].sort_values(
            by=['DATALAN', 'TIPO_LAN', 'CODI_LOTE'],
            ascending=[True, False, True]
        )

        for _, row in movimentos.iterrows():
            valdeb = row.get('VALDEB', 0) or 0
            valcre = row.get('VALCRE', 0) or 0
            running_balance += valdeb - valcre

            display_saldo = abs(running_balance)
            natureza_display = ''
            if natureza_conta_original == 'D':
                natureza_display = 'D' if running_balance >= 0 else 'C'
            elif natureza_conta_original == 'C':
                natureza_display = 'C' if running_balance <= 0 else 'D'

            saldo_final_str = f"{display_saldo:,.2f}"
            if abs(running_balance) > 0.001:
                saldo_final_str += natureza_display

            ws.cell(row=current_row, column=1, value=row['DATALAN'].strftime('%d/%m/%Y')).font = normal_font_small

            lote = int(row.get('CODI_LOTE', 0)) if pd.notna(row.get('CODI_LOTE')) else ''
            historico = row.get('HISTORICO', '')
            cell_lote_hist = ws.cell(row=current_row, column=2, value=sanitize_text(f"{lote} {historico}"))
            cell_lote_hist.font = normal_font_small
            cell_lote_hist.alignment = Alignment(wrap_text=True, vertical='top')

            ws.cell(row=current_row, column=3, value=row.get('CONTRAP', '')).font = normal_font_small

            # Ajustar posições das colunas baseado no idioma
            if is_english:
                # Inglês: sem coluna Branch
                deb_col, cred_col, saldo_col = 4, 5, 6
            else:
                # Português: com coluna Branch
                ws.cell(row=current_row, column=4, value=row.get('FILIAL', '')).font = normal_font_small
                deb_col, cred_col, saldo_col = 5, 6, 7

            deb_cell = ws.cell(row=current_row, column=deb_col, value=valdeb if valdeb else '')
            deb_cell.number_format = '#,##0.00'; deb_cell.font = normal_font_small

            cred_cell = ws.cell(row=current_row, column=cred_col, value=valcre if valcre else '')
            cred_cell.number_format = '#,##0.00'; cred_cell.font = normal_font_small

            saldo_exe_cell = ws.cell(row=current_row, column=saldo_col, value=saldo_final_str)
            saldo_exe_cell.alignment = right_align; saldo_exe_cell.font = normal_font_small

            current_row += 1

        total_deb = group[group['TIPO'] == 2]['VALDEB'].sum() if not group[group['TIPO'] == 2].empty else 0
        total_cred = group[group['TIPO'] == 2]['VALCRE'].sum() if not group[group['TIPO'] == 2].empty else 0

        ws.cell(row=current_row, column=2, value=f"{traducoes['total_conta']}:").font = bold_font_small

        # Ajustar posições das colunas para totais
        if is_english:
            total_deb_col, total_cred_col = 4, 5
        else:
            total_deb_col, total_cred_col = 5, 6

        total_deb_cell = ws.cell(row=current_row, column=total_deb_col, value=total_deb)
        total_deb_cell.font = bold_font_small; total_deb_cell.number_format = '#,##0.00'
        total_cred_cell = ws.cell(row=current_row, column=total_cred_col, value=total_cred)
        total_cred_cell.font = bold_font_small; total_cred_cell.number_format = '#,##0.00'

        current_row += 2

    current_row += 4 
    signature_start_row = current_row

    # Assinatura do Responsável (Esquerda)
    if is_english:
        # Inglês: 6 colunas (A até F)
        ws.merge_cells(f'A{signature_start_row}:C{signature_start_row}')
        ws.merge_cells(f'A{signature_start_row + 1}:C{signature_start_row + 1}')
        ws.merge_cells(f'A{signature_start_row + 2}:C{signature_start_row + 2}')
        
        ws.merge_cells(f'D{signature_start_row}:F{signature_start_row}')
        ws.merge_cells(f'D{signature_start_row + 1}:F{signature_start_row + 1}')
        ws.merge_cells(f'D{signature_start_row + 2}:F{signature_start_row + 2}')
        ws.merge_cells(f'D{signature_start_row + 3}:F{signature_start_row + 3}')
        
        signature_cols_resp = ['A', 'A', 'A']
        signature_cols_cont = ['D', 'D', 'D', 'D']
    else:
        # Português: 8 colunas (A até H)
        ws.merge_cells(f'A{signature_start_row}:D{signature_start_row}')
        ws.merge_cells(f'A{signature_start_row + 1}:D{signature_start_row + 1}')
        ws.merge_cells(f'A{signature_start_row + 2}:D{signature_start_row + 2}')
        
        ws.merge_cells(f'E{signature_start_row}:H{signature_start_row}')
        ws.merge_cells(f'E{signature_start_row + 1}:H{signature_start_row + 1}')
        ws.merge_cells(f'E{signature_start_row + 2}:H{signature_start_row + 2}')
        ws.merge_cells(f'E{signature_start_row + 3}:H{signature_start_row + 3}')
        
        signature_cols_resp = ['A', 'A', 'A']
        signature_cols_cont = ['E', 'E', 'E', 'E']

    line_cell_resp = ws[f'{signature_cols_resp[0]}{signature_start_row}']
    line_cell_resp.value = '_' * 60  # Linha de assinatura com caracteres
    line_cell_resp.alignment = Alignment(horizontal='center', vertical='bottom')
    line_cell_resp.font = normal_font_small

    cell = ws[f'{signature_cols_resp[1]}{signature_start_row + 1}']
    cell.value = sanitize_text(empresa_info.get('responsavel_nome', 'N/A')); cell.alignment = center_align; cell.font = normal_font_small
    cell = ws[f'{signature_cols_resp[2]}{signature_start_row + 2}']
    cell.value = sanitize_text(f"CPF: {empresa_info.get('responsavel_cpf', 'N/A')}"); cell.alignment = center_align; cell.font = normal_font_small
    
    # Assinatura do Contador (Direita)
    line_cell_cont = ws[f'{signature_cols_cont[0]}{signature_start_row}']
    line_cell_cont.value = '_' * 60  # Linha de assinatura com caracteres
    line_cell_cont.alignment = Alignment(horizontal='center', vertical='bottom')
    line_cell_cont.font = normal_font_small
    
    cell = ws[f'{signature_cols_cont[1]}{signature_start_row + 1}']
    cell.value = sanitize_text(empresa_info.get('contador_nome', 'N/A')); cell.alignment = center_align; cell.font = normal_font_small
    cell = ws[f'{signature_cols_cont[2]}{signature_start_row + 2}']
    cell.value = sanitize_text(empresa_info.get('contador_crc', 'N/A')); cell.alignment = center_align; cell.font = normal_font_small
    cell = ws[f'{signature_cols_cont[3]}{signature_start_row + 3}']
    cell.value = sanitize_text(f"CPF: {empresa_info.get('contador_cpf', 'N/A')}"); cell.alignment = center_align; cell.font = normal_font_small

    # Largura das Colunas - ajustado conforme idioma
    if is_english:
        # Layout para inglês (6 colunas)
        ws.column_dimensions['A'].width = 12  # Date
        ws.column_dimensions['B'].width = 60  # Reg. Narration  
        ws.column_dimensions['C'].width = 12  # Contra
        ws.column_dimensions['D'].width = 15  # Debit
        ws.column_dimensions['E'].width = 15  # Credit
        ws.column_dimensions['F'].width = 18  # Ending Balance
    else:
        # Layout para português (7 colunas)
        ws.column_dimensions['A'].width = 12  # Data
        ws.column_dimensions['B'].width = 60  # Lote Histórico
        ws.column_dimensions['C'].width = 12  # Cta.C.Part.
        ws.column_dimensions['D'].width = 10  # Filial
        ws.column_dimensions['E'].width = 15  # Débito
        ws.column_dimensions['F'].width = 15  # Crédito
        ws.column_dimensions['G'].width = 18  # Saldo-Exercício
        ws.column_dimensions['H'].width = 15  # Extra
    
    wb.save(filename)

def gerar_relatorio_razao_com_dump(codi_emp: int, data_inicial: str, data_final: str, filiais: bool, idioma_ingles: bool = False):
    # ⏰ INÍCIO DO CRONÔMETRO PRINCIPAL
    tempo_inicio_total = time.time()
    # Inicializa variáveis para robustez do retorno
    dump_filename = None
    arquivos_gerados = []
    lang_suffix = '_EN' if idioma_ingles else ''
    xlsx_files = []
    json_file = None
    # Gera um timestamp único para esta execução
    timestamp_str = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    print(f"\n{'='*60}")
    print(f"🚀 INICIANDO FLUXO PARA EMPRESA: {codi_emp} (Sessão: {timestamp_str})")
    print(f"⏰ Horário de início: {datetime.now().strftime('%H:%M:%S')}")
    print(f"{'='*60}")
    
    conn = None
    tempos_passos = {}
    
    xlsx_files = []
    json_file = None
    try:
        # PASSO: Conexão com banco
        tempo_inicio_passo = time.time()
        conn = pyodbc.connect(CONN_STR)
        cursor = conn.cursor()
        tempo_fim_passo = time.time()
        tempos_passos['Conexão'] = cronometro_passo("Conexão com banco", tempo_inicio_passo, tempo_fim_passo)

        print("\n[CONFIG] Buscando traduções para o idioma selecionado...")
        traducoes = obter_traducoes_idioma(cursor, idioma_ingles=idioma_ingles)
        print(f"  -> Idioma configurado para: {'Inglês' if idioma_ingles else 'Português'}")

        empresa_info = {}

        # ... (todo o restante do código principal da função permanece igual até o bloco de renomeação) ...

        # Renomear arquivos XLSX após geração
        try:
            renamed_files = []
            for arquivo in arquivos_gerados:
                if arquivo.endswith('.xlsx'):
                    renamed_file = file_renamer.rename_file_after_generation(
                        arquivo, codi_emp, data_inicial, data_final, timestamp_str, idioma_ingles, None, CONN_STR
                    )
                    renamed_files.append(renamed_file)
                    print(f"   • XLSX renomeado: {renamed_file}")
                else:
                    renamed_files.append(arquivo)
            arquivos_gerados = renamed_files
            xlsx_files = [f for f in arquivos_gerados if f.endswith('.xlsx')]
        except Exception as e:
            print(f"Aviso: Erro ao renomear arquivos: {e}. Mantendo nomes originais.")

    except Exception as e:
        print(f"\nERRO INESPERADO: {e}")
        xlsx_files = []
        json_file = None
    finally:
        # Limpeza final
        tempo_inicio_passo = time.time()
        if 'conn' in locals() and conn:
            if filiais:
                print("\nLimpando permissões temporárias de usuário...")
                try:
                    cursor = conn.cursor()
                    #cursor.execute("DELETE FROM bethadba.ctfilialuser WHERE codi_emp = ? AND usuario = CURRENT USER", codi_emp)
                    #conn.commit()
                    print("  -> Permissões limpas com sucesso.")
                except Exception as cleanup_error:
                    print(f"  -> ERRO ao limpar permissões: {cleanup_error}")
            conn.close()
            print(f"  -> Conexão com o banco de dados fechada.")
        tempo_fim_passo = time.time()
        tempos_passos['Limpeza final'] = cronometro_passo("Limpeza e fechamento", tempo_inicio_passo, tempo_fim_passo)

        # ⏰ FIM DO CRONÔMETRO PRINCIPAL
        tempo_fim_total = time.time()
        tempo_total_execucao = tempo_fim_total - tempo_inicio_total

        # RELATÓRIO FINAL DE TEMPOS
        print(f"\n{'='*60}")
        print(f"⏰ RELATÓRIO DE TEMPOS DE EXECUÇÃO")
        print(f"{'='*60}")
        print(f"🕐 Horário de término: {datetime.now().strftime('%H:%M:%S')}")
        print(f"📊 Detalhamento por etapa:")

        total_etapas = 0
        for nome_passo, tempo_passo in tempos_passos.items():
            print(f"   • {nome_passo:25}: {formatar_tempo(tempo_passo)}")
            total_etapas += tempo_passo

        print(f"{'='*60}")
        print(f"🏁 TEMPO TOTAL DE EXECUÇÃO: {formatar_tempo(tempo_total_execucao)}")
        print(f"📈 Eficiência: {(total_etapas/tempo_total_execucao)*100:.1f}% (tempo útil)")
        print(f"{'='*60}")

    print(f"✅ Fluxo concluído. {len(xlsx_files)} arquivo(s) gerado(s).")
    # Retorno padronizado
    return {"xlsx": xlsx_files, "json": json_file}


